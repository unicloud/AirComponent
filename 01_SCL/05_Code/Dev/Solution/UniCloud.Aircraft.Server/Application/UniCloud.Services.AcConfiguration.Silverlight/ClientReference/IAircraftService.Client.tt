<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="System.ServiceModel.dll"#>
<#@ assembly name="System.Runtime.Serialization.dll"#>
<#@ Assembly Name="$(SolutionDir)Packages\UniCloud.Infrastructure.1.0.1\lib\UniCloud.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Application.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Application.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Domain\UniCloud.Domain.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Domain.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.ServiceContracts.AcConfiguration\bin\$(ConfigurationName)\UniCloud.ServiceContracts.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Query.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Query.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Services.AcConfiguration\bin\UniCloud.Services.AcConfiguration.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="UniCloud.Application" #>
<#@ import namespace="System.ServiceModel"#>
<#@ include file="..\Common.tt"#>
// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.ServiceModel;
using System.Reflection;
using UniCloud.DataObjects.Silverlight;

namespace UniCloud.Services.Client.AcConfiguration
{

<#foreach (MethodInfo method in typeof(UniCloud.Services.AircraftService).GetMethods()) 
{#>

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="<#=method.Name#>", WrapperNamespace="http://www.UniCloud.com", IsWrapped=true)]
    public partial class <#=method.Name#>Request {
		<# int i=0;
		foreach (var parameter in method.GetParameters()) 
{#>[System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.UniCloud.com",Order=<#= i #>)]
		public <#=parameter.ParameterType.Name#> <#=parameter.Name#>;
		<# i++;
		}#>

        public <#=method.Name#>Request() {
        }
        
		<#if(method.ReturnType != typeof(void) && method.GetParameters().Length>0){#>public <#=method.Name#>Request(<#=GetMethodParameterList(method)#>) {
		<#foreach (var parameter in method.GetParameters())
		{#>

			this.<#=parameter.Name#> = <#=parameter.Name#>;
	<#}#>
    }<#}#> 
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="<#=method.Name#>Response", WrapperNamespace="http://www.UniCloud.com", IsWrapped=true)]
    public partial class <#=method.Name#>Response {
        
		<#if(method.ReturnType != typeof(void)){#>[System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.UniCloud.com")]
		public <#=method.ReturnType.Name#> <#=method.Name#>Result;<#}#> 
        
        public <#=method.Name#>Response() {
        }
        
		<#if(method.ReturnType != typeof(void)){#>public <#=method.Name#>Response(<#=method.ReturnType.Name#> <#=method.Name#>Result) {
			this.<#=method.Name#>Result = <#=method.Name#>Result;
        }<#}#> 
    }

<#}#>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.UniCloud.com", ConfigurationName="IAircraftService")]
 	public interface IAircraftService
	{
		<#foreach (MethodInfo method in typeof(UniCloud.Services.AircraftService).GetMethods()) 
{#>

		[OperationContractAttribute(AsyncPattern=true, Action="http://www.UniCloud.com/IAircraftService/<#=method.Name#>", ReplyAction="http://www.UniCloud.com/IAircraftService/<#=method.Name#>Response")]
        [FaultContractAttribute(typeof(FaultData), Action="http://www.UniCloud.com/IAircraftService/<#=method.Name#>FaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/UniCloud.DataObjects")]
        IAsyncResult Begin<#=method.Name#>(<#=method.Name#>Request request, AsyncCallback callback, object asyncState);

        <#=method.Name#>Response End<#=method.Name#>(IAsyncResult result);

<#}#>
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAircraftServiceChannel : IAircraftService, IClientChannel {
    }

		<#foreach (MethodInfo method in typeof(UniCloud.Services.AircraftService).GetMethods()) 
{#>

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class <#=method.Name#>CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public <#=method.Name#>CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public <#=method.Name#>Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((<#=method.Name#>Response)(this.results[0]));
            }
        }
    }
<#}#>

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
	public partial class AcConfigurationServiceClient : System.ServiceModel.ClientBase<IAircraftService>, IAircraftService 
	{

		<#foreach (MethodInfo method in typeof(UniCloud.Services.AircraftService).GetMethods()) 
{#>

        private BeginOperationDelegate _onBegin<#=method.Name#>Delegate;
        
        private EndOperationDelegate _onEnd<#=method.Name#>Delegate;
        
        private System.Threading.SendOrPostCallback _on<#=method.Name#>CompletedDelegate;

<#}#>

        private EventInfo[] _events;

		private void GetAllEvents()
		{
		  _events = this.GetType().GetEvents(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
		} 

        public void SetEvent(string eventName, object value)
        {
            try
            {
                if (_events == null || _events.Length < 1)
                {
                    return;
                }
                for (int i = 0; i < _events.Length; i++)
                {
                    EventInfo ei = _events[i];
                    if (ei.Name.Equals(eventName, StringComparison.InvariantCultureIgnoreCase))
                    {
                        FieldInfo fi = ei.DeclaringType.GetField(eventName, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        if (fi != null)
                        {
                            fi.SetValue(this ,value );
                        }
                        break;
                    }
                }
            }
            catch
            {
            }
        }
        public AcConfigurationServiceClient() {
		    GetAllEvents();
        }
        
        public AcConfigurationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
				GetAllEvents();
        }
        
        public AcConfigurationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
				GetAllEvents();
        }
        
        public AcConfigurationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
				GetAllEvents();
        }
        
        public AcConfigurationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
				GetAllEvents();
        }

		        public System.Net.CookieContainer CookieContainer {
            get {
                var httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                var httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }

		<#foreach (MethodInfo method in typeof(UniCloud.Services.AircraftService).GetMethods()) 
{#>

       public event System.EventHandler<<#=method.Name#>CompletedEventArgs> <#=method.Name#>Completed;

<#}#>

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

		<#foreach (MethodInfo method in typeof(UniCloud.Services.AircraftService).GetMethods()) 
{#>

       [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IAircraftService.Begin<#=method.Name#>(<#=method.Name#>Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin<#=method.Name#>(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        <#=method.Name#>Response IAircraftService.End<#=method.Name#>(System.IAsyncResult result) {
            return base.Channel.End<#=method.Name#>(result);
        }
        
        private System.IAsyncResult OnBegin<#=method.Name#>(object[] inValues, System.AsyncCallback callback, object asyncState) {
            var request = ((<#=method.Name#>Request)(inValues[0]));
            return ((IAircraftService)(this)).Begin<#=method.Name#>(request, callback, asyncState);
        }
        
        private object[] OnEnd<#=method.Name#>(System.IAsyncResult result) {
            var retVal = ((IAircraftService)(this)).End<#=method.Name#>(result);
            return new object[] {
                    retVal};
        }
        
        private void On<#=method.Name#>Completed(object state) {
            if ((this.<#=method.Name#>Completed != null)) {
                var e = ((InvokeAsyncCompletedEventArgs)(state));
                this.<#=method.Name#>Completed(this, new <#=method.Name#>CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void <#=method.Name#>Async(<#=method.Name#>Request request) {
            this.<#=method.Name#>Async(request, null);
        }
        
        public void <#=method.Name#>Async(<#=method.Name#>Request request, object userState) {
            if ((this._onBegin<#=method.Name#>Delegate == null)) {
                this._onBegin<#=method.Name#>Delegate = new BeginOperationDelegate(this.OnBegin<#=method.Name#>);
            }
            if ((this._onEnd<#=method.Name#>Delegate == null)) {
                this._onEnd<#=method.Name#>Delegate = new EndOperationDelegate(this.OnEnd<#=method.Name#>);
            }
            if ((this._on<#=method.Name#>CompletedDelegate == null)) {
                this._on<#=method.Name#>CompletedDelegate = new System.Threading.SendOrPostCallback(this.On<#=method.Name#>Completed);
            }
            base.InvokeAsync(this._onBegin<#=method.Name#>Delegate, new object[] {
                        request}, this._onEnd<#=method.Name#>Delegate, this._on<#=method.Name#>CompletedDelegate, userState);
        }
<#}#>
	}
}