 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using UniCloud.DataObjects.Silverlight;
using UniCloud.Services.Client.AcConfiguration;

namespace UniCloud.Services
{
    /// <summary>
    /// 飞机构型实现
    /// </summary>
    public class AircraftClient : IAircraftClient
    {
	     #region Private Fields

         private static readonly AircraftClient _instance = new AircraftClient();
         private readonly AcConfigurationServiceClient _acConfigurationServiceClient;
 
         #endregion

         #region Ctor

         private AircraftClient()
         {
             _acConfigurationServiceClient = new AcConfigurationServiceClient("BasicHttpBinding_IAircraftService");
         }

         #endregion

         #region Properties

         /// <summary>
         /// 服务实例
         /// </summary>
         public static AircraftClient Instance
         {
             get { return _instance; }
         }

         #endregion


	     #region IAcRegService
		 
	     public  void CreateAcRegs(AcRegDataObjectList acRegs,
		 EventHandler<CreateAcRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAcRegsRequest(acRegs);
            _acConfigurationServiceClient.SetEvent("CreateAcRegsCompleted", callback);
            _acConfigurationServiceClient.CreateAcRegsAsync(request, state);
		 }

	     public  void DeleteAcRegs(AcRegDataObjectList acRegs,
		 EventHandler<DeleteAcRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAcRegsRequest(acRegs);
            _acConfigurationServiceClient.SetEvent("DeleteAcRegsCompleted", callback);
            _acConfigurationServiceClient.DeleteAcRegsAsync(request, state);
		 }

	     public  void UpdateAcRegs(AcRegDataObjectList acRegs,
		 EventHandler<UpdateAcRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAcRegsRequest(acRegs);
            _acConfigurationServiceClient.SetEvent("UpdateAcRegsCompleted", callback);
            _acConfigurationServiceClient.UpdateAcRegsAsync(request, state);
		 }

	     public  void CommitAcRegs(AcRegResultData acRegData,
		 EventHandler<CommitAcRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAcRegsRequest(acRegData);
            _acConfigurationServiceClient.SetEvent("CommitAcRegsCompleted", callback);
            _acConfigurationServiceClient.CommitAcRegsAsync(request, state);
		 }

	     public  void GetFullAcRegByID(Int32 id,
		 EventHandler<GetFullAcRegByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullAcRegByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullAcRegByIDCompleted", callback);
            _acConfigurationServiceClient.GetFullAcRegByIDAsync(request, state);
		 }

	     public  void GetFullAcRegByGuid(String id,
		 EventHandler<GetFullAcRegByGuidCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullAcRegByGuidRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullAcRegByGuidCompleted", callback);
            _acConfigurationServiceClient.GetFullAcRegByGuidAsync(request, state);
		 }

	     public  void GetFullAcRegs(
		 EventHandler<GetFullAcRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullAcRegsRequest();
            _acConfigurationServiceClient.SetEvent("GetFullAcRegsCompleted", callback);
            _acConfigurationServiceClient.GetFullAcRegsAsync(request, state);
		 }
 
	    public void GetAcRegs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcRegsCompletedEventArgs> callback,object state = null)
		 {
		    var request = new GetAcRegsRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcRegsCompleted", callback);
            _acConfigurationServiceClient.GetAcRegsAsync(request, state);
		 }

	    public void GetAcRegWithPagination(Pagination pagination,
		 EventHandler<GetAcRegWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		    var request = new GetAcRegWithPaginationRequest(pagination);
            _acConfigurationServiceClient.SetEvent("GetAcRegWithPaginationCompleted", callback);
            _acConfigurationServiceClient.GetAcRegWithPaginationAsync(request, state);
		 }

	    public void GetAcRegByID(Int32 id,
		 EventHandler<GetAcRegByIDCompletedEventArgs> callback,object state = null)
		 {
		    var request = new GetAcRegByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAcRegByIDCompleted", callback);
            _acConfigurationServiceClient.GetAcRegByIDAsync(request, state);
		 }

	    public void GetAcRegByGuid(String id,
		 EventHandler<GetAcRegByGuidCompletedEventArgs> callback,object state = null)
		 {
		    var request = new GetAcRegByGuidRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAcRegByGuidCompleted", callback);
            _acConfigurationServiceClient.GetAcRegByGuidAsync(request, state);
		 }

	    public void GetAcregLicenseByAcregID(Int32 id,
		 EventHandler<GetAcregLicenseByAcregIDCompletedEventArgs> callback,object state = null)
		 {
		    var request = new GetAcregLicenseByAcregIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAcregLicenseByAcregIDCompleted", callback);
            _acConfigurationServiceClient.GetAcregLicenseByAcregIDAsync(request, state);
		 }

	    public void GetAcRegCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcRegColCompletedEventArgs> callback,object state = null)
		 {
		    var request = new GetAcRegColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcRegColCompleted", callback);
            _acConfigurationServiceClient.GetAcRegColAsync(request, state);
		 }
         #endregion

		 #region IAcCategoryService
		
	    public  void CreateAcCategorys(AcCategoryDataObjectList acCategorys,
		EventHandler<CreateAcCategorysCompletedEventArgs> callback,object state = null)
		{
		     var request = new CreateAcCategorysRequest(acCategorys);
            _acConfigurationServiceClient.SetEvent("CreateAcCategorysCompleted", callback);
            _acConfigurationServiceClient.CreateAcCategorysAsync(request, state);
		}

	    public  void DeleteAcCategorys(IDList acCategoryIDs,
		EventHandler<DeleteAcCategorysCompletedEventArgs> callback,object state = null)
		{
		     var request = new DeleteAcCategorysRequest(acCategoryIDs);
            _acConfigurationServiceClient.SetEvent("DeleteAcCategorysCompleted", callback);
            _acConfigurationServiceClient.DeleteAcCategorysAsync(request, state);
		}

	    public  void UpdateAcCategorys(AcCategoryDataObjectList acCategorys,
		EventHandler<UpdateAcCategorysCompletedEventArgs> callback,object state = null)
		{
		     var request = new UpdateAcCategorysRequest(acCategorys);
            _acConfigurationServiceClient.SetEvent("UpdateAcCategorysCompleted", callback);
            _acConfigurationServiceClient.UpdateAcCategorysAsync(request, state);
		}

	    public  void CommitAcCategorys(AcCategoryResultData acCategoryData,
		EventHandler<CommitAcCategorysCompletedEventArgs> callback,object state = null)
		{
		     var request = new CommitAcCategorysRequest(acCategoryData);
            _acConfigurationServiceClient.SetEvent("CommitAcCategorysCompleted", callback);
            _acConfigurationServiceClient.CommitAcCategorysAsync(request, state);
		}

	    public  void GetFullAcCategoryByID(Int32 id,
		EventHandler<GetFullAcCategoryByIDCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAcCategoryByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullAcCategoryByIDCompleted", callback);
            _acConfigurationServiceClient.GetFullAcCategoryByIDAsync(request, state);
		}

	    public  void GetFullAcCategorys(
		EventHandler<GetFullAcCategorysCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAcCategorysRequest();
            _acConfigurationServiceClient.SetEvent("GetFullAcCategorysCompleted", callback);
            _acConfigurationServiceClient.GetFullAcCategorysAsync(request, state);
		}
 
	     public  void GetAcCategorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcCategorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcCategorysRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcCategorysCompleted", callback);
            _acConfigurationServiceClient.GetAcCategorysAsync(request, state);
		}

	     public  void GetAcCategoryWithPagination(Pagination pagination,
		 EventHandler<GetAcCategoryWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcCategoryWithPaginationRequest(pagination);
            _acConfigurationServiceClient.SetEvent("GetAcCategoryWithPaginationCompleted", callback);
            _acConfigurationServiceClient.GetAcCategoryWithPaginationAsync(request, state);
		}

	     public  void GetAcCategoryByID(Int32 id,
		 EventHandler<GetAcCategoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcCategoryByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAcCategoryByIDCompleted", callback);
            _acConfigurationServiceClient.GetAcCategoryByIDAsync(request, state);
		}

	     public  void GetAcCategoryCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcCategoryColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcCategoryColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcCategoryColCompleted", callback);
            _acConfigurationServiceClient.GetAcCategoryColAsync(request, state);
		}
        #endregion

		 #region IAcTypeService
		
	    public  void CreateAcTypes(AcTypeDataObjectList acTypes,
		EventHandler<CreateAcTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new CreateAcTypesRequest(acTypes);
            _acConfigurationServiceClient.SetEvent("CreateAcTypesCompleted", callback);
            _acConfigurationServiceClient.CreateAcTypesAsync(request, state);
		}

	    public  void DeleteAcTypes(IDList acTypeIDs,
		EventHandler<DeleteAcTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new DeleteAcTypesRequest(acTypeIDs);
            _acConfigurationServiceClient.SetEvent("DeleteAcTypesCompleted", callback);
            _acConfigurationServiceClient.DeleteAcTypesAsync(request, state);
		}

	    public  void UpdateAcTypes(AcTypeDataObjectList acTypes,
		EventHandler<UpdateAcTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new UpdateAcTypesRequest(acTypes);
            _acConfigurationServiceClient.SetEvent("UpdateAcTypesCompleted", callback);
            _acConfigurationServiceClient.UpdateAcTypesAsync(request, state);
		}

	    public  void CommitAcTypes(AcTypeResultData acTypeData,
		EventHandler<CommitAcTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new CommitAcTypesRequest(acTypeData);
            _acConfigurationServiceClient.SetEvent("CommitAcTypesCompleted", callback);
            _acConfigurationServiceClient.CommitAcTypesAsync(request, state);
		}

	    public  void GetFullAcTypeByID(Int32 id,
		EventHandler<GetFullAcTypeByIDCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAcTypeByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullAcTypeByIDCompleted", callback);
            _acConfigurationServiceClient.GetFullAcTypeByIDAsync(request, state);
		}

	    public  void GetFullAcTypeByGuid(String id,
		EventHandler<GetFullAcTypeByGuidCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAcTypeByGuidRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullAcTypeByGuidCompleted", callback);
            _acConfigurationServiceClient.GetFullAcTypeByGuidAsync(request, state);
		}

	    public  void GetFullAcTypes(
		EventHandler<GetFullAcTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAcTypesRequest();
            _acConfigurationServiceClient.SetEvent("GetFullAcTypesCompleted", callback);
            _acConfigurationServiceClient.GetFullAcTypesAsync(request, state);
		}

	    public  void ManageAcTypeAta(AcTypeDataObjectList actypes,
		EventHandler<ManageAcTypeAtaCompletedEventArgs> callback,object state = null)
		{
		     var request = new ManageAcTypeAtaRequest(actypes);
            _acConfigurationServiceClient.SetEvent("ManageAcTypeAtaCompleted", callback);
            _acConfigurationServiceClient.ManageAcTypeAtaAsync(request, state);
		}

	    public  void CreateAcModels(Int32 acTypeId, AcModelDataObjectList acModels,
		EventHandler<CreateAcModelsCompletedEventArgs> callback,object state = null)
		{
		     var request = new CreateAcModelsRequest(acTypeId, acModels);
            _acConfigurationServiceClient.SetEvent("CreateAcModelsCompleted", callback);
            _acConfigurationServiceClient.CreateAcModelsAsync(request, state);
		}

	    public  void UpdateAcModels(Int32 acTypeId, AcModelDataObjectList acModels,
		EventHandler<UpdateAcModelsCompletedEventArgs> callback,object state = null)
		{
		     var request = new UpdateAcModelsRequest(acTypeId, acModels);
            _acConfigurationServiceClient.SetEvent("UpdateAcModelsCompleted", callback);
            _acConfigurationServiceClient.UpdateAcModelsAsync(request, state);
		}

	    public  void CreateAcConfigs(Int32 acTypeId, Int32 acModelId, AcConfigDataObjectList acConfigs,
		EventHandler<CreateAcConfigsCompletedEventArgs> callback,object state = null)
		{
		     var request = new CreateAcConfigsRequest(acTypeId, acModelId, acConfigs);
            _acConfigurationServiceClient.SetEvent("CreateAcConfigsCompleted", callback);
            _acConfigurationServiceClient.CreateAcConfigsAsync(request, state);
		}

	    public  void UpdateAcConfigs(Int32 acTypeId, Int32 acModelId, AcConfigDataObjectList acConfigs,
		EventHandler<UpdateAcConfigsCompletedEventArgs> callback,object state = null)
		{
		     var request = new UpdateAcConfigsRequest(acTypeId, acModelId, acConfigs);
            _acConfigurationServiceClient.SetEvent("UpdateAcConfigsCompleted", callback);
            _acConfigurationServiceClient.UpdateAcConfigsAsync(request, state);
		}

	    public  void DeleteAcModels(Int32 acTypeId, AcModelDataObjectList acModels,
		EventHandler<DeleteAcModelsCompletedEventArgs> callback,object state = null)
		{
		     var request = new DeleteAcModelsRequest(acTypeId, acModels);
            _acConfigurationServiceClient.SetEvent("DeleteAcModelsCompleted", callback);
            _acConfigurationServiceClient.DeleteAcModelsAsync(request, state);
		}

	    public  void DeleteAcConfigs(Int32 acTypeId, Int32 acModelId, AcConfigDataObjectList acConfigs,
		EventHandler<DeleteAcConfigsCompletedEventArgs> callback,object state = null)
		{
		     var request = new DeleteAcConfigsRequest(acTypeId, acModelId, acConfigs);
            _acConfigurationServiceClient.SetEvent("DeleteAcConfigsCompleted", callback);
            _acConfigurationServiceClient.DeleteAcConfigsAsync(request, state);
		}
 
	     public void GetAcTypes(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcTypesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcTypesRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcTypesCompleted", callback);
            _acConfigurationServiceClient.GetAcTypesAsync(request, state);
		}

	     public void GetAcTypeWithPagination(Pagination pagination,
		 EventHandler<GetAcTypeWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcTypeWithPaginationRequest(pagination);
            _acConfigurationServiceClient.SetEvent("GetAcTypeWithPaginationCompleted", callback);
            _acConfigurationServiceClient.GetAcTypeWithPaginationAsync(request, state);
		}

	     public void GetAcTypeByID(Int32 id,
		 EventHandler<GetAcTypeByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcTypeByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAcTypeByIDCompleted", callback);
            _acConfigurationServiceClient.GetAcTypeByIDAsync(request, state);
		}

	     public void GetAcTypeByGuid(String id,
		 EventHandler<GetAcTypeByGuidCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcTypeByGuidRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAcTypeByGuidCompleted", callback);
            _acConfigurationServiceClient.GetAcTypeByGuidAsync(request, state);
		}

	     public void GetAcModels(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcModelsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcModelsRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcModelsCompleted", callback);
            _acConfigurationServiceClient.GetAcModelsAsync(request, state);
		}

	     public void GetAcModelByID(Int32 Id,
		 EventHandler<GetAcModelByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcModelByIDRequest(Id);
            _acConfigurationServiceClient.SetEvent("GetAcModelByIDCompleted", callback);
            _acConfigurationServiceClient.GetAcModelByIDAsync(request, state);
		}

	     public void GetAcModelByGuid(String Id,
		 EventHandler<GetAcModelByGuidCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcModelByGuidRequest(Id);
            _acConfigurationServiceClient.SetEvent("GetAcModelByGuidCompleted", callback);
            _acConfigurationServiceClient.GetAcModelByGuidAsync(request, state);
		}

	     public void GetAcConfigs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcConfigsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcConfigsRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcConfigsCompleted", callback);
            _acConfigurationServiceClient.GetAcConfigsAsync(request, state);
		}

	     public void GetAcConfigByID(Int32 Id,
		 EventHandler<GetAcConfigByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcConfigByIDRequest(Id);
            _acConfigurationServiceClient.SetEvent("GetAcConfigByIDCompleted", callback);
            _acConfigurationServiceClient.GetAcConfigByIDAsync(request, state);
		}

	     public void GetAcConfigByGuid(String Id,
		 EventHandler<GetAcConfigByGuidCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcConfigByGuidRequest(Id);
            _acConfigurationServiceClient.SetEvent("GetAcConfigByGuidCompleted", callback);
            _acConfigurationServiceClient.GetAcConfigByGuidAsync(request, state);
		}

	     public void GetAcTypeCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcTypeColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcTypeColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcTypeColCompleted", callback);
            _acConfigurationServiceClient.GetAcTypeColAsync(request, state);
		}

	     public void GetAcConfigCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcConfigColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcConfigColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcConfigColCompleted", callback);
            _acConfigurationServiceClient.GetAcConfigColAsync(request, state);
		}

	     public void GetAcModelCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcModelColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcModelColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAcModelColCompleted", callback);
            _acConfigurationServiceClient.GetAcModelColAsync(request, state);
		}
        #endregion

		 #region IAtaService
		
	    public void CreateAtas(AtaDataObjectList atas,
		EventHandler<CreateAtasCompletedEventArgs> callback,object state = null)
		{
		     var request = new CreateAtasRequest(atas);
            _acConfigurationServiceClient.SetEvent("CreateAtasCompleted", callback);
            _acConfigurationServiceClient.CreateAtasAsync(request, state);
		}

	    public void DeleteAtas(IDList ataIDs,
		EventHandler<DeleteAtasCompletedEventArgs> callback,object state = null)
		{
		     var request = new DeleteAtasRequest(ataIDs);
            _acConfigurationServiceClient.SetEvent("DeleteAtasCompleted", callback);
            _acConfigurationServiceClient.DeleteAtasAsync(request, state);
		}

	    public void UpdateAtas(AtaDataObjectList atas,
		EventHandler<UpdateAtasCompletedEventArgs> callback,object state = null)
		{
		     var request = new UpdateAtasRequest(atas);
            _acConfigurationServiceClient.SetEvent("UpdateAtasCompleted", callback);
            _acConfigurationServiceClient.UpdateAtasAsync(request, state);
		}

	    public void CommitAtas(AtaResultData ataData,
		EventHandler<CommitAtasCompletedEventArgs> callback,object state = null)
		{
		     var request = new CommitAtasRequest(ataData);
            _acConfigurationServiceClient.SetEvent("CommitAtasCompleted", callback);
            _acConfigurationServiceClient.CommitAtasAsync(request, state);
		}

	    public void GetFullAtaByID(Int32 id,
		EventHandler<GetFullAtaByIDCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAtaByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullAtaByIDCompleted", callback);
            _acConfigurationServiceClient.GetFullAtaByIDAsync(request, state);
		}

	    public void GetFullAtas(
		EventHandler<GetFullAtasCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullAtasRequest();
            _acConfigurationServiceClient.SetEvent("GetFullAtasCompleted", callback);
            _acConfigurationServiceClient.GetFullAtasAsync(request, state);
		}
 
	     public void GetAtas(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAtasCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAtasRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAtasCompleted", callback);
            _acConfigurationServiceClient.GetAtasAsync(request, state);
		}

	     public void GetAtaWithPagination(Pagination pagination,
		 EventHandler<GetAtaWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAtaWithPaginationRequest(pagination);
            _acConfigurationServiceClient.SetEvent("GetAtaWithPaginationCompleted", callback);
            _acConfigurationServiceClient.GetAtaWithPaginationAsync(request, state);
		}

	     public void GetAtaByID(Int32 id,
		 EventHandler<GetAtaByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAtaByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAtaByIDCompleted", callback);
            _acConfigurationServiceClient.GetAtaByIDAsync(request, state);
		}

	     public void GetAtaByGuid(String id,
		 EventHandler<GetAtaByGuidCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAtaByGuidRequest(id);
            _acConfigurationServiceClient.SetEvent("GetAtaByGuidCompleted", callback);
            _acConfigurationServiceClient.GetAtaByGuidAsync(request, state);
		}

	     public void GetAtaCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAtaColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAtaColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetAtaColCompleted", callback);
            _acConfigurationServiceClient.GetAtaColAsync(request, state);
		}
        #endregion

		 #region ILicenseTypeService
		
	    public void CreateLicenseTypes(LicenseTypeDataObjectList licenseTypes,
		EventHandler<CreateLicenseTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new CreateLicenseTypesRequest(licenseTypes);
            _acConfigurationServiceClient.SetEvent("CreateLicenseTypesCompleted", callback);
            _acConfigurationServiceClient.CreateLicenseTypesAsync(request, state);
		}

	    public void DeleteLicenseTypes(IDList licenseTypeIDs,
		EventHandler<DeleteLicenseTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new DeleteLicenseTypesRequest(licenseTypeIDs);
            _acConfigurationServiceClient.SetEvent("DeleteLicenseTypesCompleted", callback);
            _acConfigurationServiceClient.DeleteLicenseTypesAsync(request, state);
		}

	    public void UpdateLicenseTypes(LicenseTypeDataObjectList licenseTypes,
		EventHandler<UpdateLicenseTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new UpdateLicenseTypesRequest(licenseTypes);
            _acConfigurationServiceClient.SetEvent("UpdateLicenseTypesCompleted", callback);
            _acConfigurationServiceClient.UpdateLicenseTypesAsync(request, state);
		}

	    public void CommitLicenseTypes(LicenseTypeResultData licenseTypeData,
		EventHandler<CommitLicenseTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new CommitLicenseTypesRequest(licenseTypeData);
            _acConfigurationServiceClient.SetEvent("CommitLicenseTypesCompleted", callback);
            _acConfigurationServiceClient.CommitLicenseTypesAsync(request, state);
		}

	    public void GetFullLicenseTypeByID(Int32 id,
		EventHandler<GetFullLicenseTypeByIDCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullLicenseTypeByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetFullLicenseTypeByIDCompleted", callback);
            _acConfigurationServiceClient.GetFullLicenseTypeByIDAsync(request, state);
		}

	    public void GetFullLicenseTypes(
		EventHandler<GetFullLicenseTypesCompletedEventArgs> callback,object state = null)
		{
		     var request = new GetFullLicenseTypesRequest();
            _acConfigurationServiceClient.SetEvent("GetFullLicenseTypesCompleted", callback);
            _acConfigurationServiceClient.GetFullLicenseTypesAsync(request, state);
		}
 
	     public void GetLicenseTypes(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetLicenseTypesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetLicenseTypesRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetLicenseTypesCompleted", callback);
            _acConfigurationServiceClient.GetLicenseTypesAsync(request, state);
		}

	     public void GetLicenseTypeWithPagination(Pagination pagination,
		 EventHandler<GetLicenseTypeWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetLicenseTypeWithPaginationRequest(pagination);
            _acConfigurationServiceClient.SetEvent("GetLicenseTypeWithPaginationCompleted", callback);
            _acConfigurationServiceClient.GetLicenseTypeWithPaginationAsync(request, state);
		}

	     public void GetLicenseTypeByID(Int32 id,
		 EventHandler<GetLicenseTypeByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetLicenseTypeByIDRequest(id);
            _acConfigurationServiceClient.SetEvent("GetLicenseTypeByIDCompleted", callback);
            _acConfigurationServiceClient.GetLicenseTypeByIDAsync(request, state);
		}

	     public void GetLicenseTypeCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetLicenseTypeColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetLicenseTypeColRequest(colFilter, sortFilter);
            _acConfigurationServiceClient.SetEvent("GetLicenseTypeColCompleted", callback);
            _acConfigurationServiceClient.GetLicenseTypeColAsync(request, state);
		}
        #endregion

		public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
	}
}