<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="System.ServiceModel.dll"#>
<#@ assembly name="System.Runtime.Serialization.dll"#>
<#@ Assembly Name="$(SolutionDir)Packages\UniCloud.Infrastructure.1.0.1\lib\UniCloud.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Application.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Application.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Domain\UniCloud.Domain.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Domain.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.ServiceContracts.AcConfiguration\bin\$(ConfigurationName)\UniCloud.ServiceContracts.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Query.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Query.AcConfiguration.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="UniCloud.Application" #>
<#@ import namespace="System.ServiceModel"#>
<#@ include file="Common.tt"#>
// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using UniCloud.DataObjects.Silverlight;
using UniCloud.Services.Client.AcConfiguration;

namespace UniCloud.Services
{
    /// <summary>
    /// 飞机构型实现
    /// </summary>
    public class AircraftClient : IAircraftClient
    {
	     #region Private Fields

         private static readonly AircraftClient _instance = new AircraftClient();
         private readonly AcConfigurationServiceClient _acConfigurationServiceClient;
 
         #endregion

         #region Ctor

         private AircraftClient()
         {
             _acConfigurationServiceClient = new AcConfigurationServiceClient("BasicHttpBinding_IAircraftService");
         }

         #endregion

         #region Properties

         /// <summary>
         /// 服务实例
         /// </summary>
         public static AircraftClient Instance
         {
             get { return _instance; }
         }

         #endregion


	     #region IAcRegService
		 <#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAcRegService).GetMethods()) 
{#>

	     public  void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		 EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		 {
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		 }
<#}#>
 <#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAcRegQuery).GetMethods()) 
{#>

	    public void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		 EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		 {
		    var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		 }
<#}#>
         #endregion

		 #region IAcCategoryService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAcCategoryService).GetMethods()) 
{#>

	    public  void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		{
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
 <#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAcCategoryQuery).GetMethods()) 
{#>

	     public  void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		 EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		 {
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
        #endregion

		 #region IAcTypeService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAcTypeService).GetMethods()) 
{#>

	    public  void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		{
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
 <#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAcTypeQuery).GetMethods()) 
{#>

	     public void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		 EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		 {
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
        #endregion

		 #region IAtaService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAtaService).GetMethods()) 
{#>

	    public void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		{
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
 <#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAtaQuery).GetMethods()) 
{#>

	     public void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		 EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		 {
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
        #endregion

		 #region ILicenseTypeService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.ILicenseTypeService).GetMethods()) 
{#>

	    public void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		{
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
 <#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.ILicenseTypeQuery).GetMethods()) 
{#>

	     public void <#=method.Name#>(<#=GetMethodParameterList(method).Length>0?GetMethodParameterList(method)+",":""#>
		 EventHandler<<#=method.Name#>CompletedEventArgs> callback,object state = null)
		 {
		     var request = new <#=method.Name#>Request(<#=GetMethodParameterValueList(method)#>);
            _acConfigurationServiceClient.SetEvent("<#=method.Name#>Completed", callback);
            _acConfigurationServiceClient.<#=method.Name#>Async(request, state);
		}
<#}#>
        #endregion

		public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
	}
}