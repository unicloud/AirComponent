 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using UniCloud.DataObjects.Silverlight;
using UniCloud.Services.Client.AcConfiguration;

namespace UniCloud.Services
{
    /// <summary>
    /// 飞机构型接口
    /// </summary>
    public interface IAircraftClient : IDisposable 
    {
	     #region IAcRegService
		 
	   void CreateAcRegs(AcRegDataObjectList acRegs,
		 EventHandler<CreateAcRegsCompletedEventArgs> callback,object state = null);

	   void DeleteAcRegs(AcRegDataObjectList acRegs,
		 EventHandler<DeleteAcRegsCompletedEventArgs> callback,object state = null);

	   void UpdateAcRegs(AcRegDataObjectList acRegs,
		 EventHandler<UpdateAcRegsCompletedEventArgs> callback,object state = null);

	   void CommitAcRegs(AcRegResultData acRegData,
		 EventHandler<CommitAcRegsCompletedEventArgs> callback,object state = null);

	   void GetFullAcRegByID(Int32 id,
		 EventHandler<GetFullAcRegByIDCompletedEventArgs> callback,object state = null);

	   void GetFullAcRegByGuid(String id,
		 EventHandler<GetFullAcRegByGuidCompletedEventArgs> callback,object state = null);

	   void GetFullAcRegs(
		 EventHandler<GetFullAcRegsCompletedEventArgs> callback,object state = null);
 
	   void GetAcRegs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcRegsCompletedEventArgs> callback,object state = null);

	   void GetAcRegWithPagination(Pagination pagination,
		 EventHandler<GetAcRegWithPaginationCompletedEventArgs> callback,object state = null);

	   void GetAcRegByID(Int32 id,
		 EventHandler<GetAcRegByIDCompletedEventArgs> callback,object state = null);

	   void GetAcRegByGuid(String id,
		 EventHandler<GetAcRegByGuidCompletedEventArgs> callback,object state = null);

	   void GetAcregLicenseByAcregID(Int32 id,
		 EventHandler<GetAcregLicenseByAcregIDCompletedEventArgs> callback,object state = null);

	   void GetAcRegCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcRegColCompletedEventArgs> callback,object state = null);
         #endregion

		 #region IAcCategoryService
		
	  void CreateAcCategorys(AcCategoryDataObjectList acCategorys,
		EventHandler<CreateAcCategorysCompletedEventArgs> callback,object state = null);

	  void DeleteAcCategorys(IDList acCategoryIDs,
		EventHandler<DeleteAcCategorysCompletedEventArgs> callback,object state = null);

	  void UpdateAcCategorys(AcCategoryDataObjectList acCategorys,
		EventHandler<UpdateAcCategorysCompletedEventArgs> callback,object state = null);

	  void CommitAcCategorys(AcCategoryResultData acCategoryData,
		EventHandler<CommitAcCategorysCompletedEventArgs> callback,object state = null);

	  void GetFullAcCategoryByID(Int32 id,
		EventHandler<GetFullAcCategoryByIDCompletedEventArgs> callback,object state = null);

	  void GetFullAcCategorys(
		EventHandler<GetFullAcCategorysCompletedEventArgs> callback,object state = null);
 
	   void GetAcCategorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcCategorysCompletedEventArgs> callback,object state = null);

	   void GetAcCategoryWithPagination(Pagination pagination,
		 EventHandler<GetAcCategoryWithPaginationCompletedEventArgs> callback,object state = null);

	   void GetAcCategoryByID(Int32 id,
		 EventHandler<GetAcCategoryByIDCompletedEventArgs> callback,object state = null);

	   void GetAcCategoryCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcCategoryColCompletedEventArgs> callback,object state = null);
        #endregion

		 #region IAcTypeService
		
	  void CreateAcTypes(AcTypeDataObjectList acTypes,
		EventHandler<CreateAcTypesCompletedEventArgs> callback,object state = null);

	  void DeleteAcTypes(IDList acTypeIDs,
		EventHandler<DeleteAcTypesCompletedEventArgs> callback,object state = null);

	  void UpdateAcTypes(AcTypeDataObjectList acTypes,
		EventHandler<UpdateAcTypesCompletedEventArgs> callback,object state = null);

	  void CommitAcTypes(AcTypeResultData acTypeData,
		EventHandler<CommitAcTypesCompletedEventArgs> callback,object state = null);

	  void GetFullAcTypeByID(Int32 id,
		EventHandler<GetFullAcTypeByIDCompletedEventArgs> callback,object state = null);

	  void GetFullAcTypeByGuid(String id,
		EventHandler<GetFullAcTypeByGuidCompletedEventArgs> callback,object state = null);

	  void GetFullAcTypes(
		EventHandler<GetFullAcTypesCompletedEventArgs> callback,object state = null);

	  void ManageAcTypeAta(AcTypeDataObjectList actypes,
		EventHandler<ManageAcTypeAtaCompletedEventArgs> callback,object state = null);

	  void CreateAcModels(Int32 acTypeId, AcModelDataObjectList acModels,
		EventHandler<CreateAcModelsCompletedEventArgs> callback,object state = null);

	  void UpdateAcModels(Int32 acTypeId, AcModelDataObjectList acModels,
		EventHandler<UpdateAcModelsCompletedEventArgs> callback,object state = null);

	  void CreateAcConfigs(Int32 acTypeId, Int32 acModelId, AcConfigDataObjectList acConfigs,
		EventHandler<CreateAcConfigsCompletedEventArgs> callback,object state = null);

	  void UpdateAcConfigs(Int32 acTypeId, Int32 acModelId, AcConfigDataObjectList acConfigs,
		EventHandler<UpdateAcConfigsCompletedEventArgs> callback,object state = null);

	  void DeleteAcModels(Int32 acTypeId, AcModelDataObjectList acModels,
		EventHandler<DeleteAcModelsCompletedEventArgs> callback,object state = null);

	  void DeleteAcConfigs(Int32 acTypeId, Int32 acModelId, AcConfigDataObjectList acConfigs,
		EventHandler<DeleteAcConfigsCompletedEventArgs> callback,object state = null);
 
	   void GetAcTypes(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcTypesCompletedEventArgs> callback,object state = null);

	   void GetAcTypeWithPagination(Pagination pagination,
		 EventHandler<GetAcTypeWithPaginationCompletedEventArgs> callback,object state = null);

	   void GetAcTypeByID(Int32 id,
		 EventHandler<GetAcTypeByIDCompletedEventArgs> callback,object state = null);

	   void GetAcTypeByGuid(String id,
		 EventHandler<GetAcTypeByGuidCompletedEventArgs> callback,object state = null);

	   void GetAcModels(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcModelsCompletedEventArgs> callback,object state = null);

	   void GetAcModelByID(Int32 Id,
		 EventHandler<GetAcModelByIDCompletedEventArgs> callback,object state = null);

	   void GetAcModelByGuid(String Id,
		 EventHandler<GetAcModelByGuidCompletedEventArgs> callback,object state = null);

	   void GetAcConfigs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcConfigsCompletedEventArgs> callback,object state = null);

	   void GetAcConfigByID(Int32 Id,
		 EventHandler<GetAcConfigByIDCompletedEventArgs> callback,object state = null);

	   void GetAcConfigByGuid(String Id,
		 EventHandler<GetAcConfigByGuidCompletedEventArgs> callback,object state = null);

	   void GetAcTypeCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcTypeColCompletedEventArgs> callback,object state = null);

	   void GetAcConfigCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcConfigColCompletedEventArgs> callback,object state = null);

	   void GetAcModelCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcModelColCompletedEventArgs> callback,object state = null);
        #endregion

		 #region IAtaService
		
	  void CreateAtas(AtaDataObjectList atas,
		EventHandler<CreateAtasCompletedEventArgs> callback,object state = null);

	  void DeleteAtas(IDList ataIDs,
		EventHandler<DeleteAtasCompletedEventArgs> callback,object state = null);

	  void UpdateAtas(AtaDataObjectList atas,
		EventHandler<UpdateAtasCompletedEventArgs> callback,object state = null);

	  void CommitAtas(AtaResultData ataData,
		EventHandler<CommitAtasCompletedEventArgs> callback,object state = null);

	  void GetFullAtaByID(Int32 id,
		EventHandler<GetFullAtaByIDCompletedEventArgs> callback,object state = null);

	  void GetFullAtas(
		EventHandler<GetFullAtasCompletedEventArgs> callback,object state = null);
 
	   void GetAtas(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAtasCompletedEventArgs> callback,object state = null);

	   void GetAtaWithPagination(Pagination pagination,
		 EventHandler<GetAtaWithPaginationCompletedEventArgs> callback,object state = null);

	   void GetAtaByID(Int32 id,
		 EventHandler<GetAtaByIDCompletedEventArgs> callback,object state = null);

	   void GetAtaByGuid(String id,
		 EventHandler<GetAtaByGuidCompletedEventArgs> callback,object state = null);

	   void GetAtaCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAtaColCompletedEventArgs> callback,object state = null);
        #endregion

		 #region ILicenseTypeService
		
	  void CreateLicenseTypes(LicenseTypeDataObjectList licenseTypes,
		EventHandler<CreateLicenseTypesCompletedEventArgs> callback,object state = null);

	  void DeleteLicenseTypes(IDList licenseTypeIDs,
		EventHandler<DeleteLicenseTypesCompletedEventArgs> callback,object state = null);

	  void UpdateLicenseTypes(LicenseTypeDataObjectList licenseTypes,
		EventHandler<UpdateLicenseTypesCompletedEventArgs> callback,object state = null);

	  void CommitLicenseTypes(LicenseTypeResultData licenseTypeData,
		EventHandler<CommitLicenseTypesCompletedEventArgs> callback,object state = null);

	  void GetFullLicenseTypeByID(Int32 id,
		EventHandler<GetFullLicenseTypeByIDCompletedEventArgs> callback,object state = null);

	  void GetFullLicenseTypes(
		EventHandler<GetFullLicenseTypesCompletedEventArgs> callback,object state = null);
 
	   void GetLicenseTypes(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetLicenseTypesCompletedEventArgs> callback,object state = null);

	   void GetLicenseTypeWithPagination(Pagination pagination,
		 EventHandler<GetLicenseTypeWithPaginationCompletedEventArgs> callback,object state = null);

	   void GetLicenseTypeByID(Int32 id,
		 EventHandler<GetLicenseTypeByIDCompletedEventArgs> callback,object state = null);

	   void GetLicenseTypeCol(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetLicenseTypeColCompletedEventArgs> callback,object state = null);
        #endregion
	}
}