<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="System.ServiceModel.dll"#>
<#@ assembly name="System.Runtime.Serialization.dll"#>
<#@ Assembly Name="$(SolutionDir)Packages\UniCloud.Infrastructure.1.0.1\lib\UniCloud.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Application.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Application.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Domain\UniCloud.Domain.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Domain.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.ServiceContracts.AcConfiguration\bin\$(ConfigurationName)\UniCloud.ServiceContracts.AcConfiguration.dll" #>
<#@ Assembly Name="$(SolutionDir)UniCloud.Aircraft.Server\Application\UniCloud.Query.AcConfiguration\bin\$(ConfigurationName)\UniCloud.Query.AcConfiguration.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="UniCloud.Application" #>
<#@ import namespace="System.ServiceModel"#>
<#@ include file="Common.tt"#>
// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.Collections.Generic;
using System.ServiceModel;
using UniCloud.Application;
using UniCloud.DataObjects;
using UniCloud.ServiceContracts;
using UniCloud.Infrastructure;
using UniCloud.Query.AcConfiguration;

namespace UniCloud.Services
{
	public class AircraftService : IAircraftService
	{
		#region 服务接口
	    private readonly IAcCategoryService _acCategoryServiceImpl = ServiceLocator.Instance.GetService<IAcCategoryService>();
		private readonly IAcRegService _acRegServiceImpl = ServiceLocator.Instance.GetService<IAcRegService>();
		private readonly IAcTypeService _acTypeServicempl = ServiceLocator.Instance.GetService<IAcTypeService>();
		private readonly IAtaService _ataServiceImpl = ServiceLocator.Instance.GetService<IAtaService>();
		private readonly ILicenseTypeService _licenseTypeServiceImpl = ServiceLocator.Instance.GetService<ILicenseTypeService>();

		private readonly IAcTypeQuery _acTypeQuery = ServiceLocator.Instance.GetService<IAcTypeQuery>();
		private readonly IAcCategoryQuery _acCategoryQuery = ServiceLocator.Instance.GetService<IAcCategoryQuery>();
		private readonly IAcRegQuery _acRegQuery = ServiceLocator.Instance.GetService<IAcRegQuery>();
		private readonly IAtaQuery _ataQuery = ServiceLocator.Instance.GetService<IAtaQuery>();
		private readonly ILicenseTypeQuery _licenseTypeQuery = ServiceLocator.Instance.GetService<ILicenseTypeQuery>();
		#endregion


		#region IAcRegService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAcRegService).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _acRegServiceImpl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
        #endregion

	    #region IAcRegQuery
		<#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAcRegQuery).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _acRegQuery.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		#endregion

		 #region IAcTypeService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAcTypeService).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _acTypeServicempl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
        #endregion

		#region IAcTypeQuery
		<#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAcTypeQuery).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _acTypeQuery.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		#endregion

		 #region IAtaService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAtaService).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _ataServiceImpl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
        #endregion

		#region IAtaQuery
		<#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAtaQuery).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _ataQuery.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		#endregion

	    #region ILicenseTypeService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.ILicenseTypeService).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _licenseTypeServiceImpl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
         #endregion

		 #region ILicenseTypeQuery
		<#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.ILicenseTypeQuery).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _licenseTypeQuery.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		#endregion

		#region IAcCategoryService
		<#foreach (MethodInfo method in typeof(UniCloud.ServiceContracts.IAcCategoryService).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _acCategoryServiceImpl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
        #endregion

		 #region IAcCategoryQuery
		<#foreach (MethodInfo method in typeof(UniCloud.Query.AcConfiguration.IAcCategoryQuery).GetMethods()) 
{#>

		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> _acCategoryQuery.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		#endregion
	}
}


