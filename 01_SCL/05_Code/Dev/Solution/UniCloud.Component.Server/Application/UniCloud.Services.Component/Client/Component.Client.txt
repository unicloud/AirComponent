 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using UniCloud.DataObjects.Silverlight;
using UniCloud.Services.Client.Component;

namespace UniCloud.Services
{
    /// <summary>
    /// 附件构型实现
    /// </summary>
    public class PartClient : IPartClient
    {
	     #region Private Fields

        private static readonly PartClient _instance=new PartClient();
        private readonly ComponentServiceClient _componentServiceClient; 
 
         #endregion

         #region Ctor

        public PartClient()
        {
            _componentServiceClient = new ComponentServiceClient("BasicHttpBinding_IPartService");
        }

         #endregion

         #region Properties

         /// <summary>
         /// 服务实例
         /// </summary>
       public static PartClient Instance
        {
            get { return _instance; }
        }

         #endregion


		  public  void CreateCcOrders(CcOrderDataObjectList ccOrders,
		 EventHandler<CreateCcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateCcOrdersRequest(ccOrders);
            _componentServiceClient.SetEvent("CreateCcOrdersCompleted", callback);
            _componentServiceClient.CreateCcOrdersAsync(request, state);
		  }

		 public  void DeleteCcOrders(IDList ccOrderIDs,
		 EventHandler<DeleteCcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteCcOrdersRequest(ccOrderIDs);
            _componentServiceClient.SetEvent("DeleteCcOrdersCompleted", callback);
            _componentServiceClient.DeleteCcOrdersAsync(request, state);
		  }

		 public  void UpdateCcOrders(CcOrderDataObjectList ccOrders,
		 EventHandler<UpdateCcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateCcOrdersRequest(ccOrders);
            _componentServiceClient.SetEvent("UpdateCcOrdersCompleted", callback);
            _componentServiceClient.UpdateCcOrdersAsync(request, state);
		  }

		 public  void CommitCcOrders(CcOrderResultData ccOrderData,
		 EventHandler<CommitCcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitCcOrdersRequest(ccOrderData);
            _componentServiceClient.SetEvent("CommitCcOrdersCompleted", callback);
            _componentServiceClient.CommitCcOrdersAsync(request, state);
		  }

		 public  void GetFullCcOrderByID(Int32 id,
		 EventHandler<GetFullCcOrderByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullCcOrderByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullCcOrderByIDCompleted", callback);
            _componentServiceClient.GetFullCcOrderByIDAsync(request, state);
		  }

		 public  void GetFullCcOrders(
		 EventHandler<GetFullCcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullCcOrdersRequest();
            _componentServiceClient.SetEvent("GetFullCcOrdersCompleted", callback);
            _componentServiceClient.GetFullCcOrdersAsync(request, state);
		  }

		 public  void VerifyCcOrder(Int32 ccOrderId,
		 EventHandler<VerifyCcOrderCompletedEventArgs> callback,object state = null)
		 {
		     var request = new VerifyCcOrderRequest(ccOrderId);
            _componentServiceClient.SetEvent("VerifyCcOrderCompleted", callback);
            _componentServiceClient.VerifyCcOrderAsync(request, state);
		  }

		 public  void VerifyEngCcOrder(Int32 ccOrderId,
		 EventHandler<VerifyEngCcOrderCompletedEventArgs> callback,object state = null)
		 {
		     var request = new VerifyEngCcOrderRequest(ccOrderId);
            _componentServiceClient.SetEvent("VerifyEngCcOrderCompleted", callback);
            _componentServiceClient.VerifyEngCcOrderAsync(request, state);
		  }

		 public  void GetCcOrders(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetCcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetCcOrdersRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetCcOrdersCompleted", callback);
            _componentServiceClient.GetCcOrdersAsync(request, state);
		  }

		 public  void GetCcOrderWithPagination(Pagination pagination,
		 EventHandler<GetCcOrderWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetCcOrderWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetCcOrderWithPaginationCompleted", callback);
            _componentServiceClient.GetCcOrderWithPaginationAsync(request, state);
		  }

		 public  void GetCcOrderByID(Int32 id,
		 EventHandler<GetCcOrderByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetCcOrderByIDRequest(id);
            _componentServiceClient.SetEvent("GetCcOrderByIDCompleted", callback);
            _componentServiceClient.GetCcOrderByIDAsync(request, state);
		  }

		 public  void GetEngCcOrderWithPagination(Pagination pagination,
		 EventHandler<GetEngCcOrderWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetEngCcOrderWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetEngCcOrderWithPaginationCompleted", callback);
            _componentServiceClient.GetEngCcOrderWithPaginationAsync(request, state);
		  }

		 public  void GetEngCcOrderByID(Int32 id,
		 EventHandler<GetEngCcOrderByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetEngCcOrderByIDRequest(id);
            _componentServiceClient.SetEvent("GetEngCcOrderByIDCompleted", callback);
            _componentServiceClient.GetEngCcOrderByIDAsync(request, state);
		  }

		 public  void CreateCcpMains(CcpMainDataObjectList ccpMains,
		 EventHandler<CreateCcpMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateCcpMainsRequest(ccpMains);
            _componentServiceClient.SetEvent("CreateCcpMainsCompleted", callback);
            _componentServiceClient.CreateCcpMainsAsync(request, state);
		  }

		 public  void DeleteCcpMains(IDList ccpMainIDs,
		 EventHandler<DeleteCcpMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteCcpMainsRequest(ccpMainIDs);
            _componentServiceClient.SetEvent("DeleteCcpMainsCompleted", callback);
            _componentServiceClient.DeleteCcpMainsAsync(request, state);
		  }

		 public  void UpdateCcpMains(CcpMainDataObjectList ccpMains,
		 EventHandler<UpdateCcpMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateCcpMainsRequest(ccpMains);
            _componentServiceClient.SetEvent("UpdateCcpMainsCompleted", callback);
            _componentServiceClient.UpdateCcpMainsAsync(request, state);
		  }

		 public  void CommitCcpMains(CcpMainResultData ccpMainData,
		 EventHandler<CommitCcpMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitCcpMainsRequest(ccpMainData);
            _componentServiceClient.SetEvent("CommitCcpMainsCompleted", callback);
            _componentServiceClient.CommitCcpMainsAsync(request, state);
		  }

		 public  void GetFullCcpMainByID(Int32 id,
		 EventHandler<GetFullCcpMainByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullCcpMainByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullCcpMainByIDCompleted", callback);
            _componentServiceClient.GetFullCcpMainByIDAsync(request, state);
		  }

		 public  void GetFullCcpMains(
		 EventHandler<GetFullCcpMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullCcpMainsRequest();
            _componentServiceClient.SetEvent("GetFullCcpMainsCompleted", callback);
            _componentServiceClient.GetFullCcpMainsAsync(request, state);
		  }

		 public  void QueryAllCcpMain(String actype, String itemNo, String ata, String stateStation,
		 EventHandler<QueryAllCcpMainCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QueryAllCcpMainRequest(actype, itemNo, ata, stateStation);
            _componentServiceClient.SetEvent("QueryAllCcpMainCompleted", callback);
            _componentServiceClient.QueryAllCcpMainAsync(request, state);
		  }

		 public  void VerifyCcpMain(Int32 ccpMainId,
		 EventHandler<VerifyCcpMainCompletedEventArgs> callback,object state = null)
		 {
		     var request = new VerifyCcpMainRequest(ccpMainId);
            _componentServiceClient.SetEvent("VerifyCcpMainCompleted", callback);
            _componentServiceClient.VerifyCcpMainAsync(request, state);
		  }

		 public  void GetCcpMains(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetCcpMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetCcpMainsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetCcpMainsCompleted", callback);
            _componentServiceClient.GetCcpMainsAsync(request, state);
		  }

		 public  void GetCcpMainWithPagination(Pagination pagination,
		 EventHandler<GetCcpMainWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetCcpMainWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetCcpMainWithPaginationCompleted", callback);
            _componentServiceClient.GetCcpMainWithPaginationAsync(request, state);
		  }

		 public  void GetCcpMainByID(Int32 id,
		 EventHandler<GetCcpMainByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetCcpMainByIDRequest(id);
            _componentServiceClient.SetEvent("GetCcpMainByIDCompleted", callback);
            _componentServiceClient.GetCcpMainByIDAsync(request, state);
		  }

		 public  void CreateIntUnits(IntUnitDataObjectList intUnits,
		 EventHandler<CreateIntUnitsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateIntUnitsRequest(intUnits);
            _componentServiceClient.SetEvent("CreateIntUnitsCompleted", callback);
            _componentServiceClient.CreateIntUnitsAsync(request, state);
		  }

		 public  void DeleteIntUnits(IDList intUnitIDs,
		 EventHandler<DeleteIntUnitsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteIntUnitsRequest(intUnitIDs);
            _componentServiceClient.SetEvent("DeleteIntUnitsCompleted", callback);
            _componentServiceClient.DeleteIntUnitsAsync(request, state);
		  }

		 public  void UpdateIntUnits(IntUnitDataObjectList intUnits,
		 EventHandler<UpdateIntUnitsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateIntUnitsRequest(intUnits);
            _componentServiceClient.SetEvent("UpdateIntUnitsCompleted", callback);
            _componentServiceClient.UpdateIntUnitsAsync(request, state);
		  }

		 public  void CommitIntUnits(IntUnitResultData intUnitData,
		 EventHandler<CommitIntUnitsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitIntUnitsRequest(intUnitData);
            _componentServiceClient.SetEvent("CommitIntUnitsCompleted", callback);
            _componentServiceClient.CommitIntUnitsAsync(request, state);
		  }

		 public  void GetIntUnits(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetIntUnitsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetIntUnitsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetIntUnitsCompleted", callback);
            _componentServiceClient.GetIntUnitsAsync(request, state);
		  }

		 public  void GetIntUnitWithPagination(Pagination pagination,
		 EventHandler<GetIntUnitWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetIntUnitWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetIntUnitWithPaginationCompleted", callback);
            _componentServiceClient.GetIntUnitWithPaginationAsync(request, state);
		  }

		 public  void GetIntUnitByID(Int32 id,
		 EventHandler<GetIntUnitByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetIntUnitByIDRequest(id);
            _componentServiceClient.SetEvent("GetIntUnitByIDCompleted", callback);
            _componentServiceClient.GetIntUnitByIDAsync(request, state);
		  }

		 public  void CreateOilHistorys(OilHistoryDataObjectList oilHistorys,
		 EventHandler<CreateOilHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateOilHistorysRequest(oilHistorys);
            _componentServiceClient.SetEvent("CreateOilHistorysCompleted", callback);
            _componentServiceClient.CreateOilHistorysAsync(request, state);
		  }

		 public  void DeleteOilHistorys(IDList oilHistoryIDs,
		 EventHandler<DeleteOilHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteOilHistorysRequest(oilHistoryIDs);
            _componentServiceClient.SetEvent("DeleteOilHistorysCompleted", callback);
            _componentServiceClient.DeleteOilHistorysAsync(request, state);
		  }

		 public  void UpdateOilHistorys(OilHistoryDataObjectList oilHistorys,
		 EventHandler<UpdateOilHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateOilHistorysRequest(oilHistorys);
            _componentServiceClient.SetEvent("UpdateOilHistorysCompleted", callback);
            _componentServiceClient.UpdateOilHistorysAsync(request, state);
		  }

		 public  void CommitOilHistorys(OilHistoryResultData oilHistoryData,
		 EventHandler<CommitOilHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitOilHistorysRequest(oilHistoryData);
            _componentServiceClient.SetEvent("CommitOilHistorysCompleted", callback);
            _componentServiceClient.CommitOilHistorysAsync(request, state);
		  }

		 public  void GetFullOilHistoryByID(Int32 id,
		 EventHandler<GetFullOilHistoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullOilHistoryByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullOilHistoryByIDCompleted", callback);
            _componentServiceClient.GetFullOilHistoryByIDAsync(request, state);
		  }

		 public  void GetFullOilHistorys(
		 EventHandler<GetFullOilHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullOilHistorysRequest();
            _componentServiceClient.SetEvent("GetFullOilHistorysCompleted", callback);
            _componentServiceClient.GetFullOilHistorysAsync(request, state);
		  }

		 public  void GetOilHistorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetOilHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilHistorysRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetOilHistorysCompleted", callback);
            _componentServiceClient.GetOilHistorysAsync(request, state);
		  }

		 public  void GetOilHistoryWithPagination(Pagination pagination,
		 EventHandler<GetOilHistoryWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilHistoryWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetOilHistoryWithPaginationCompleted", callback);
            _componentServiceClient.GetOilHistoryWithPaginationAsync(request, state);
		  }

		 public  void GetOilHistoryByID(Int32 id,
		 EventHandler<GetOilHistoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilHistoryByIDRequest(id);
            _componentServiceClient.SetEvent("GetOilHistoryByIDCompleted", callback);
            _componentServiceClient.GetOilHistoryByIDAsync(request, state);
		  }

		 public  void GetOilAnalysiss(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetOilAnalysissCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilAnalysissRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetOilAnalysissCompleted", callback);
            _componentServiceClient.GetOilAnalysissAsync(request, state);
		  }

		 public  void GetOilAnalysisWithPagination(Pagination pagination,
		 EventHandler<GetOilAnalysisWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilAnalysisWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetOilAnalysisWithPaginationCompleted", callback);
            _componentServiceClient.GetOilAnalysisWithPaginationAsync(request, state);
		  }

		 public  void GetOilAnalysisByID(Int32 id,
		 EventHandler<GetOilAnalysisByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilAnalysisByIDRequest(id);
            _componentServiceClient.SetEvent("GetOilAnalysisByIDCompleted", callback);
            _componentServiceClient.GetOilAnalysisByIDAsync(request, state);
		  }

		 public  void GetOilAnalysisBySnData(OilAnalysisDataObject searchObj,
		 EventHandler<GetOilAnalysisBySnDataCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetOilAnalysisBySnDataRequest(searchObj);
            _componentServiceClient.SetEvent("GetOilAnalysisBySnDataCompleted", callback);
            _componentServiceClient.GetOilAnalysisBySnDataAsync(request, state);
		  }

		 public  void CreateOilAnalysiss(OilAnalysisDataObjectList oilAnalysiss,
		 EventHandler<CreateOilAnalysissCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateOilAnalysissRequest(oilAnalysiss);
            _componentServiceClient.SetEvent("CreateOilAnalysissCompleted", callback);
            _componentServiceClient.CreateOilAnalysissAsync(request, state);
		  }

		 public  void DeleteOilAnalysiss(IDList oilAnalysisIDs,
		 EventHandler<DeleteOilAnalysissCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteOilAnalysissRequest(oilAnalysisIDs);
            _componentServiceClient.SetEvent("DeleteOilAnalysissCompleted", callback);
            _componentServiceClient.DeleteOilAnalysissAsync(request, state);
		  }

		 public  void UpdateOilAnalysiss(OilAnalysisDataObjectList oilAnalysiss,
		 EventHandler<UpdateOilAnalysissCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateOilAnalysissRequest(oilAnalysiss);
            _componentServiceClient.SetEvent("UpdateOilAnalysissCompleted", callback);
            _componentServiceClient.UpdateOilAnalysissAsync(request, state);
		  }

		 public  void CommitOilAnalysiss(OilAnalysisResultData oilAnalysisData,
		 EventHandler<CommitOilAnalysissCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitOilAnalysissRequest(oilAnalysisData);
            _componentServiceClient.SetEvent("CommitOilAnalysissCompleted", callback);
            _componentServiceClient.CommitOilAnalysissAsync(request, state);
		  }

		 public  void GetFullOilAnalysisByID(Int32 id,
		 EventHandler<GetFullOilAnalysisByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullOilAnalysisByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullOilAnalysisByIDCompleted", callback);
            _componentServiceClient.GetFullOilAnalysisByIDAsync(request, state);
		  }

		 public  void GetFullOilAnalysiss(
		 EventHandler<GetFullOilAnalysissCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullOilAnalysissRequest();
            _componentServiceClient.SetEvent("GetFullOilAnalysissCompleted", callback);
            _componentServiceClient.GetFullOilAnalysissAsync(request, state);
		  }

		 public  void OilAnalysisOntime(
		 EventHandler<OilAnalysisOntimeCompletedEventArgs> callback,object state = null)
		 {
		     var request = new OilAnalysisOntimeRequest();
            _componentServiceClient.SetEvent("OilAnalysisOntimeCompleted", callback);
            _componentServiceClient.OilAnalysisOntimeAsync(request, state);
		  }

		 public  void CreatePartsMonitors(PartsMonitorDataObjectList partsMonitors,
		 EventHandler<CreatePartsMonitorsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreatePartsMonitorsRequest(partsMonitors);
            _componentServiceClient.SetEvent("CreatePartsMonitorsCompleted", callback);
            _componentServiceClient.CreatePartsMonitorsAsync(request, state);
		  }

		 public  void DeletePartsMonitors(IDList partsMonitorIDs,
		 EventHandler<DeletePartsMonitorsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeletePartsMonitorsRequest(partsMonitorIDs);
            _componentServiceClient.SetEvent("DeletePartsMonitorsCompleted", callback);
            _componentServiceClient.DeletePartsMonitorsAsync(request, state);
		  }

		 public  void UpdatePartsMonitors(PartsMonitorDataObjectList partsMonitors,
		 EventHandler<UpdatePartsMonitorsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdatePartsMonitorsRequest(partsMonitors);
            _componentServiceClient.SetEvent("UpdatePartsMonitorsCompleted", callback);
            _componentServiceClient.UpdatePartsMonitorsAsync(request, state);
		  }

		 public  void CommitPartsMonitors(PartsMonitorResultData partsMonitorData,
		 EventHandler<CommitPartsMonitorsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitPartsMonitorsRequest(partsMonitorData);
            _componentServiceClient.SetEvent("CommitPartsMonitorsCompleted", callback);
            _componentServiceClient.CommitPartsMonitorsAsync(request, state);
		  }

		 public  void GetFullPartsMonitorByID(Int32 id,
		 EventHandler<GetFullPartsMonitorByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullPartsMonitorByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullPartsMonitorByIDCompleted", callback);
            _componentServiceClient.GetFullPartsMonitorByIDAsync(request, state);
		  }

		 public  void GetFullPartsMonitors(
		 EventHandler<GetFullPartsMonitorsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullPartsMonitorsRequest();
            _componentServiceClient.SetEvent("GetFullPartsMonitorsCompleted", callback);
            _componentServiceClient.GetFullPartsMonitorsAsync(request, state);
		  }

		 public  void CalculateAllCcpMain(
		 EventHandler<CalculateAllCcpMainCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CalculateAllCcpMainRequest();
            _componentServiceClient.SetEvent("CalculateAllCcpMainCompleted", callback);
            _componentServiceClient.CalculateAllCcpMainAsync(request, state);
		  }

		 public  void CalculateSpecificCcpMain(String itemno,
		 EventHandler<CalculateSpecificCcpMainCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CalculateSpecificCcpMainRequest(itemno);
            _componentServiceClient.SetEvent("CalculateSpecificCcpMainCompleted", callback);
            _componentServiceClient.CalculateSpecificCcpMainAsync(request, state);
		  }

		 public  void GetPartsMonitors(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetPartsMonitorsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPartsMonitorsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetPartsMonitorsCompleted", callback);
            _componentServiceClient.GetPartsMonitorsAsync(request, state);
		  }

		 public  void GetPartsMonitorWithPagination(Pagination pagination,
		 EventHandler<GetPartsMonitorWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPartsMonitorWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetPartsMonitorWithPaginationCompleted", callback);
            _componentServiceClient.GetPartsMonitorWithPaginationAsync(request, state);
		  }

		 public  void GetPartsMonitorByID(Int32 id,
		 EventHandler<GetPartsMonitorByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPartsMonitorByIDRequest(id);
            _componentServiceClient.SetEvent("GetPartsMonitorByIDCompleted", callback);
            _componentServiceClient.GetPartsMonitorByIDAsync(request, state);
		  }

		 public  void CreatePnRegs(PnRegDataObjectList pnRegs,
		 EventHandler<CreatePnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreatePnRegsRequest(pnRegs);
            _componentServiceClient.SetEvent("CreatePnRegsCompleted", callback);
            _componentServiceClient.CreatePnRegsAsync(request, state);
		  }

		 public  void DeletePnRegs(IDList pnRegIDs,
		 EventHandler<DeletePnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeletePnRegsRequest(pnRegIDs);
            _componentServiceClient.SetEvent("DeletePnRegsCompleted", callback);
            _componentServiceClient.DeletePnRegsAsync(request, state);
		  }

		 public  void UpdatePnRegs(PnRegDataObjectList pnRegs,
		 EventHandler<UpdatePnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdatePnRegsRequest(pnRegs);
            _componentServiceClient.SetEvent("UpdatePnRegsCompleted", callback);
            _componentServiceClient.UpdatePnRegsAsync(request, state);
		  }

		 public  void CommitPnRegs(PnRegResultData pnRegData,
		 EventHandler<CommitPnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitPnRegsRequest(pnRegData);
            _componentServiceClient.SetEvent("CommitPnRegsCompleted", callback);
            _componentServiceClient.CommitPnRegsAsync(request, state);
		  }

		 public  void GetFullPnRegByID(Int32 id,
		 EventHandler<GetFullPnRegByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullPnRegByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullPnRegByIDCompleted", callback);
            _componentServiceClient.GetFullPnRegByIDAsync(request, state);
		  }

		 public  void GetFullPnRegs(
		 EventHandler<GetFullPnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullPnRegsRequest();
            _componentServiceClient.SetEvent("GetFullPnRegsCompleted", callback);
            _componentServiceClient.GetFullPnRegsAsync(request, state);
		  }

		 public  void GetPnRegs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetPnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPnRegsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetPnRegsCompleted", callback);
            _componentServiceClient.GetPnRegsAsync(request, state);
		  }

		 public  void GetPnRegWithPagination(Pagination pagination, Boolean isEngPart,
		 EventHandler<GetPnRegWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPnRegWithPaginationRequest(pagination, isEngPart);
            _componentServiceClient.SetEvent("GetPnRegWithPaginationCompleted", callback);
            _componentServiceClient.GetPnRegWithPaginationAsync(request, state);
		  }

		 public  void GetPnRegByID(Int32 id,
		 EventHandler<GetPnRegByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPnRegByIDRequest(id);
            _componentServiceClient.SetEvent("GetPnRegByIDCompleted", callback);
            _componentServiceClient.GetPnRegByIDAsync(request, state);
		  }

		 public  void GetPnRegByPn(String pn,
		 EventHandler<GetPnRegByPnCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetPnRegByPnRequest(pn);
            _componentServiceClient.SetEvent("GetPnRegByPnCompleted", callback);
            _componentServiceClient.GetPnRegByPnAsync(request, state);
		  }

		 public  void QueryPnregCol(String pn,
		 EventHandler<QueryPnregColCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QueryPnregColRequest(pn);
            _componentServiceClient.SetEvent("QueryPnregColCompleted", callback);
            _componentServiceClient.QueryPnregColAsync(request, state);
		  }

		 public  void GetEngPnOilWithPagination(Pagination pagination,
		 EventHandler<GetEngPnOilWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetEngPnOilWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetEngPnOilWithPaginationCompleted", callback);
            _componentServiceClient.GetEngPnOilWithPaginationAsync(request, state);
		  }

		 public  void CreateScnMains(ScnMainDataObjectList scnMains,
		 EventHandler<CreateScnMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateScnMainsRequest(scnMains);
            _componentServiceClient.SetEvent("CreateScnMainsCompleted", callback);
            _componentServiceClient.CreateScnMainsAsync(request, state);
		  }

		 public  void DeleteScnMains(IDList scnMainIDs,
		 EventHandler<DeleteScnMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteScnMainsRequest(scnMainIDs);
            _componentServiceClient.SetEvent("DeleteScnMainsCompleted", callback);
            _componentServiceClient.DeleteScnMainsAsync(request, state);
		  }

		 public  void UpdateScnMains(ScnMainDataObjectList scnMains,
		 EventHandler<UpdateScnMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateScnMainsRequest(scnMains);
            _componentServiceClient.SetEvent("UpdateScnMainsCompleted", callback);
            _componentServiceClient.UpdateScnMainsAsync(request, state);
		  }

		 public  void CommitScnMains(ScnMainResultData scnMainData,
		 EventHandler<CommitScnMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitScnMainsRequest(scnMainData);
            _componentServiceClient.SetEvent("CommitScnMainsCompleted", callback);
            _componentServiceClient.CommitScnMainsAsync(request, state);
		  }

		 public  void GetFullScnMainByID(Int32 id,
		 EventHandler<GetFullScnMainByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullScnMainByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullScnMainByIDCompleted", callback);
            _componentServiceClient.GetFullScnMainByIDAsync(request, state);
		  }

		 public  void GetFullScnMains(
		 EventHandler<GetFullScnMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullScnMainsRequest();
            _componentServiceClient.SetEvent("GetFullScnMainsCompleted", callback);
            _componentServiceClient.GetFullScnMainsAsync(request, state);
		  }

		 public  void GetScnMains(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetScnMainsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetScnMainsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetScnMainsCompleted", callback);
            _componentServiceClient.GetScnMainsAsync(request, state);
		  }

		 public  void GetScnMainWithPagination(Pagination pagination, String organization,
		 EventHandler<GetScnMainWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetScnMainWithPaginationRequest(pagination, organization);
            _componentServiceClient.SetEvent("GetScnMainWithPaginationCompleted", callback);
            _componentServiceClient.GetScnMainWithPaginationAsync(request, state);
		  }

		 public  void GetScnMainByID(Int32 id,
		 EventHandler<GetScnMainByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetScnMainByIDRequest(id);
            _componentServiceClient.SetEvent("GetScnMainByIDCompleted", callback);
            _componentServiceClient.GetScnMainByIDAsync(request, state);
		  }

		 public  void CompareAcOrders(String msn1, String msn2, Pagination pagination,
		 EventHandler<CompareAcOrdersCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CompareAcOrdersRequest(msn1, msn2, pagination);
            _componentServiceClient.SetEvent("CompareAcOrdersCompleted", callback);
            _componentServiceClient.CompareAcOrdersAsync(request, state);
		  }

		 public  void GetAcOrderMsns(
		 EventHandler<GetAcOrderMsnsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcOrderMsnsRequest();
            _componentServiceClient.SetEvent("GetAcOrderMsnsCompleted", callback);
            _componentServiceClient.GetAcOrderMsnsAsync(request, state);
		  }

		 public  void CreateSnHistorys(SnHistoryDataObjectList snHistorys,
		 EventHandler<CreateSnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateSnHistorysRequest(snHistorys);
            _componentServiceClient.SetEvent("CreateSnHistorysCompleted", callback);
            _componentServiceClient.CreateSnHistorysAsync(request, state);
		  }

		 public  void DeleteSnHistorys(IDList snHistoryIDs,
		 EventHandler<DeleteSnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteSnHistorysRequest(snHistoryIDs);
            _componentServiceClient.SetEvent("DeleteSnHistorysCompleted", callback);
            _componentServiceClient.DeleteSnHistorysAsync(request, state);
		  }

		 public  void UpdateSnHistorys(SnHistoryDataObjectList snHistorys,
		 EventHandler<UpdateSnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateSnHistorysRequest(snHistorys);
            _componentServiceClient.SetEvent("UpdateSnHistorysCompleted", callback);
            _componentServiceClient.UpdateSnHistorysAsync(request, state);
		  }

		 public  void CommitSnHistorys(SnHistoryResultData snHistoryData,
		 EventHandler<CommitSnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitSnHistorysRequest(snHistoryData);
            _componentServiceClient.SetEvent("CommitSnHistorysCompleted", callback);
            _componentServiceClient.CommitSnHistorysAsync(request, state);
		  }

		 public  void GetFullSnHistoryByID(Int32 id,
		 EventHandler<GetFullSnHistoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullSnHistoryByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullSnHistoryByIDCompleted", callback);
            _componentServiceClient.GetFullSnHistoryByIDAsync(request, state);
		  }

		 public  void GetFullSnHistorys(
		 EventHandler<GetFullSnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullSnHistorysRequest();
            _componentServiceClient.SetEvent("GetFullSnHistorysCompleted", callback);
            _componentServiceClient.GetFullSnHistorysAsync(request, state);
		  }

		 public  void GetSnHistorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetSnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnHistorysRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetSnHistorysCompleted", callback);
            _componentServiceClient.GetSnHistorysAsync(request, state);
		  }

		 public  void GetSnHistoryWithPagination(Pagination pagination,
		 EventHandler<GetSnHistoryWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnHistoryWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetSnHistoryWithPaginationCompleted", callback);
            _componentServiceClient.GetSnHistoryWithPaginationAsync(request, state);
		  }

		 public  void GetSnHistoryByID(Int32 id,
		 EventHandler<GetSnHistoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnHistoryByIDRequest(id);
            _componentServiceClient.SetEvent("GetSnHistoryByIDCompleted", callback);
            _componentServiceClient.GetSnHistoryByIDAsync(request, state);
		  }

		 public  void QuerySnHistorys(String ac, String itemNo, String pn, DateTime fromDate, DateTime toDate,
		 EventHandler<QuerySnHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QuerySnHistorysRequest(ac, itemNo, pn, fromDate, toDate);
            _componentServiceClient.SetEvent("QuerySnHistorysCompleted", callback);
            _componentServiceClient.QuerySnHistorysAsync(request, state);
		  }

		 public  void GetLastSnHistoryBySnregID(Int32 id,
		 EventHandler<GetLastSnHistoryBySnregIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetLastSnHistoryBySnregIDRequest(id);
            _componentServiceClient.SetEvent("GetLastSnHistoryBySnregIDCompleted", callback);
            _componentServiceClient.GetLastSnHistoryBySnregIDAsync(request, state);
		  }

		 public  void CreateSnRegs(SnRegDataObjectList snRegs,
		 EventHandler<CreateSnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateSnRegsRequest(snRegs);
            _componentServiceClient.SetEvent("CreateSnRegsCompleted", callback);
            _componentServiceClient.CreateSnRegsAsync(request, state);
		  }

		 public  void DeleteSnRegs(IDList snRegIDs,
		 EventHandler<DeleteSnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteSnRegsRequest(snRegIDs);
            _componentServiceClient.SetEvent("DeleteSnRegsCompleted", callback);
            _componentServiceClient.DeleteSnRegsAsync(request, state);
		  }

		 public  void UpdateSnRegs(SnRegDataObjectList snRegs,
		 EventHandler<UpdateSnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateSnRegsRequest(snRegs);
            _componentServiceClient.SetEvent("UpdateSnRegsCompleted", callback);
            _componentServiceClient.UpdateSnRegsAsync(request, state);
		  }

		 public  void CommitSnRegs(SnRegResultData snRegData,
		 EventHandler<CommitSnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitSnRegsRequest(snRegData);
            _componentServiceClient.SetEvent("CommitSnRegsCompleted", callback);
            _componentServiceClient.CommitSnRegsAsync(request, state);
		  }

		 public  void GetFullSnRegByID(Int32 id,
		 EventHandler<GetFullSnRegByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullSnRegByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullSnRegByIDCompleted", callback);
            _componentServiceClient.GetFullSnRegByIDAsync(request, state);
		  }

		 public  void GetFullSnRegs(
		 EventHandler<GetFullSnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullSnRegsRequest();
            _componentServiceClient.SetEvent("GetFullSnRegsCompleted", callback);
            _componentServiceClient.GetFullSnRegsAsync(request, state);
		  }

		 public  void QuerySnRegs(String ac, Int32 pnRegId, String sn,
		 EventHandler<QuerySnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QuerySnRegsRequest(ac, pnRegId, sn);
            _componentServiceClient.SetEvent("QuerySnRegsCompleted", callback);
            _componentServiceClient.QuerySnRegsAsync(request, state);
		  }

		 public  void QuerySnRegDtos(String itemNo, Int32 pnId, Int32 snId, String ac, String avail,
		 EventHandler<QuerySnRegDtosCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QuerySnRegDtosRequest(itemNo, pnId, snId, ac, avail);
            _componentServiceClient.SetEvent("QuerySnRegDtosCompleted", callback);
            _componentServiceClient.QuerySnRegDtosAsync(request, state);
		  }

		 public  void GetSnRegs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetSnRegsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnRegsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetSnRegsCompleted", callback);
            _componentServiceClient.GetSnRegsAsync(request, state);
		  }

		 public  void GetSnRegWithPagination(Pagination pagination,
		 EventHandler<GetSnRegWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnRegWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetSnRegWithPaginationCompleted", callback);
            _componentServiceClient.GetSnRegWithPaginationAsync(request, state);
		  }

		 public  void GetSnRegByID(Int32 id,
		 EventHandler<GetSnRegByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnRegByIDRequest(id);
            _componentServiceClient.SetEvent("GetSnRegByIDCompleted", callback);
            _componentServiceClient.GetSnRegByIDAsync(request, state);
		  }

		 public  void GetSnEgtMarginByID(Int32 id,
		 EventHandler<GetSnEgtMarginByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnEgtMarginByIDRequest(id);
            _componentServiceClient.SetEvent("GetSnEgtMarginByIDCompleted", callback);
            _componentServiceClient.GetSnEgtMarginByIDAsync(request, state);
		  }

		 public  void GetSnRegEgtWithPagination(Pagination pagination,
		 EventHandler<GetSnRegEgtWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetSnRegEgtWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetSnRegEgtWithPaginationCompleted", callback);
            _componentServiceClient.GetSnRegEgtWithPaginationAsync(request, state);
		  }

		 public  void QueryEngineReportDetail(Int32 id,
		 EventHandler<QueryEngineReportDetailCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QueryEngineReportDetailRequest(id);
            _componentServiceClient.SetEvent("QueryEngineReportDetailCompleted", callback);
            _componentServiceClient.QueryEngineReportDetailAsync(request, state);
		  }

		 public  void QueryEngineReports(Pagination pagination,
		 EventHandler<QueryEngineReportsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new QueryEngineReportsRequest(pagination);
            _componentServiceClient.SetEvent("QueryEngineReportsCompleted", callback);
            _componentServiceClient.QueryEngineReportsAsync(request, state);
		  }

		 public  void CreateWfHistorys(WfHistoryDataObjectList wfHistorys,
		 EventHandler<CreateWfHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateWfHistorysRequest(wfHistorys);
            _componentServiceClient.SetEvent("CreateWfHistorysCompleted", callback);
            _componentServiceClient.CreateWfHistorysAsync(request, state);
		  }

		 public  void DeleteWfHistorys(IDList wfHistoryIDs,
		 EventHandler<DeleteWfHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteWfHistorysRequest(wfHistoryIDs);
            _componentServiceClient.SetEvent("DeleteWfHistorysCompleted", callback);
            _componentServiceClient.DeleteWfHistorysAsync(request, state);
		  }

		 public  void UpdateWfHistorys(WfHistoryDataObjectList wfHistorys,
		 EventHandler<UpdateWfHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateWfHistorysRequest(wfHistorys);
            _componentServiceClient.SetEvent("UpdateWfHistorysCompleted", callback);
            _componentServiceClient.UpdateWfHistorysAsync(request, state);
		  }

		 public  void CommitWfHistorys(WfHistoryResultData wfHistoryData,
		 EventHandler<CommitWfHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitWfHistorysRequest(wfHistoryData);
            _componentServiceClient.SetEvent("CommitWfHistorysCompleted", callback);
            _componentServiceClient.CommitWfHistorysAsync(request, state);
		  }

		 public  void GetFullWfHistoryByID(Int32 id,
		 EventHandler<GetFullWfHistoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullWfHistoryByIDRequest(id);
            _componentServiceClient.SetEvent("GetFullWfHistoryByIDCompleted", callback);
            _componentServiceClient.GetFullWfHistoryByIDAsync(request, state);
		  }

		 public  void GetFullWfHistorys(
		 EventHandler<GetFullWfHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetFullWfHistorysRequest();
            _componentServiceClient.SetEvent("GetFullWfHistorysCompleted", callback);
            _componentServiceClient.GetFullWfHistorysAsync(request, state);
		  }

		 public  void GetWfHistorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetWfHistorysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWfHistorysRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetWfHistorysCompleted", callback);
            _componentServiceClient.GetWfHistorysAsync(request, state);
		  }

		 public  void GetWfHistoryWithPagination(Pagination pagination,
		 EventHandler<GetWfHistoryWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWfHistoryWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetWfHistoryWithPaginationCompleted", callback);
            _componentServiceClient.GetWfHistoryWithPaginationAsync(request, state);
		  }

		 public  void GetWfHistoryByID(Int32 id,
		 EventHandler<GetWfHistoryByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWfHistoryByIDRequest(id);
            _componentServiceClient.SetEvent("GetWfHistoryByIDCompleted", callback);
            _componentServiceClient.GetWfHistoryByIDAsync(request, state);
		  }

		 public  void GetWfHistorysByBusiness(String business, Int32 businessID,
		 EventHandler<GetWfHistorysByBusinessCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWfHistorysByBusinessRequest(business, businessID);
            _componentServiceClient.SetEvent("GetWfHistorysByBusinessCompleted", callback);
            _componentServiceClient.GetWfHistorysByBusinessAsync(request, state);
		  }

		 public  void CreateWorkScopes(WorkScopeDataObjectList workScopes,
		 EventHandler<CreateWorkScopesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateWorkScopesRequest(workScopes);
            _componentServiceClient.SetEvent("CreateWorkScopesCompleted", callback);
            _componentServiceClient.CreateWorkScopesAsync(request, state);
		  }

		 public  void DeleteWorkScopes(IDList workScopeIDs,
		 EventHandler<DeleteWorkScopesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteWorkScopesRequest(workScopeIDs);
            _componentServiceClient.SetEvent("DeleteWorkScopesCompleted", callback);
            _componentServiceClient.DeleteWorkScopesAsync(request, state);
		  }

		 public  void UpdateWorkScopes(WorkScopeDataObjectList workScopes,
		 EventHandler<UpdateWorkScopesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateWorkScopesRequest(workScopes);
            _componentServiceClient.SetEvent("UpdateWorkScopesCompleted", callback);
            _componentServiceClient.UpdateWorkScopesAsync(request, state);
		  }

		 public  void CommitWorkScopes(WorkScopeResultData workScopeData,
		 EventHandler<CommitWorkScopesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitWorkScopesRequest(workScopeData);
            _componentServiceClient.SetEvent("CommitWorkScopesCompleted", callback);
            _componentServiceClient.CommitWorkScopesAsync(request, state);
		  }

		 public  void GetWorkScopes(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetWorkScopesCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWorkScopesRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetWorkScopesCompleted", callback);
            _componentServiceClient.GetWorkScopesAsync(request, state);
		  }

		 public  void GetWorkScopeWithPagination(Pagination pagination,
		 EventHandler<GetWorkScopeWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWorkScopeWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetWorkScopeWithPaginationCompleted", callback);
            _componentServiceClient.GetWorkScopeWithPaginationAsync(request, state);
		  }

		 public  void GetWorkScopeByID(Int32 id,
		 EventHandler<GetWorkScopeByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetWorkScopeByIDRequest(id);
            _componentServiceClient.SetEvent("GetWorkScopeByIDCompleted", callback);
            _componentServiceClient.GetWorkScopeByIDAsync(request, state);
		  }

		 public  void CreateEgtMargins(EgtMarginDataObjectList egtMargins,
		 EventHandler<CreateEgtMarginsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateEgtMarginsRequest(egtMargins);
            _componentServiceClient.SetEvent("CreateEgtMarginsCompleted", callback);
            _componentServiceClient.CreateEgtMarginsAsync(request, state);
		  }

		 public  void DeleteEgtMargins(IDList egtMarginIDs,
		 EventHandler<DeleteEgtMarginsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteEgtMarginsRequest(egtMarginIDs);
            _componentServiceClient.SetEvent("DeleteEgtMarginsCompleted", callback);
            _componentServiceClient.DeleteEgtMarginsAsync(request, state);
		  }

		 public  void UpdateEgtMargins(EgtMarginDataObjectList egtMargins,
		 EventHandler<UpdateEgtMarginsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateEgtMarginsRequest(egtMargins);
            _componentServiceClient.SetEvent("UpdateEgtMarginsCompleted", callback);
            _componentServiceClient.UpdateEgtMarginsAsync(request, state);
		  }

		 public  void CommitEgtMargins(EgtMarginResultData egtMarginData,
		 EventHandler<CommitEgtMarginsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitEgtMarginsRequest(egtMarginData);
            _componentServiceClient.SetEvent("CommitEgtMarginsCompleted", callback);
            _componentServiceClient.CommitEgtMarginsAsync(request, state);
		  }

		 public  void GetEgtMargins(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetEgtMarginsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetEgtMarginsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetEgtMarginsCompleted", callback);
            _componentServiceClient.GetEgtMarginsAsync(request, state);
		  }

		 public  void GetEgtMarginWithPagination(Pagination pagination,
		 EventHandler<GetEgtMarginWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetEgtMarginWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetEgtMarginWithPaginationCompleted", callback);
            _componentServiceClient.GetEgtMarginWithPaginationAsync(request, state);
		  }

		 public  void GetEgtMarginByID(Int32 id,
		 EventHandler<GetEgtMarginByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetEgtMarginByIDRequest(id);
            _componentServiceClient.SetEvent("GetEgtMarginByIDCompleted", callback);
            _componentServiceClient.GetEgtMarginByIDAsync(request, state);
		  }

		 public  void SaveSnregEgts(SnRegDataObjectList snregs,
		 EventHandler<SaveSnregEgtsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new SaveSnregEgtsRequest(snregs);
            _componentServiceClient.SetEvent("SaveSnregEgtsCompleted", callback);
            _componentServiceClient.SaveSnregEgtsAsync(request, state);
		  }

		 public  void SaveImportEgts(SnRegDataObjectList snregs,
		 EventHandler<SaveImportEgtsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new SaveImportEgtsRequest(snregs);
            _componentServiceClient.SetEvent("SaveImportEgtsCompleted", callback);
            _componentServiceClient.SaveImportEgtsAsync(request, state);
		  }

		 public  void CreateMajorEvents(MajorEventDataObjectList majorEvents,
		 EventHandler<CreateMajorEventsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateMajorEventsRequest(majorEvents);
            _componentServiceClient.SetEvent("CreateMajorEventsCompleted", callback);
            _componentServiceClient.CreateMajorEventsAsync(request, state);
		  }

		 public  void DeleteMajorEvents(IDList majorEventIDs,
		 EventHandler<DeleteMajorEventsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteMajorEventsRequest(majorEventIDs);
            _componentServiceClient.SetEvent("DeleteMajorEventsCompleted", callback);
            _componentServiceClient.DeleteMajorEventsAsync(request, state);
		  }

		 public  void UpdateMajorEvents(MajorEventDataObjectList majorEvents,
		 EventHandler<UpdateMajorEventsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateMajorEventsRequest(majorEvents);
            _componentServiceClient.SetEvent("UpdateMajorEventsCompleted", callback);
            _componentServiceClient.UpdateMajorEventsAsync(request, state);
		  }

		 public  void CommitMajorEvents(MajorEventResultData majorEventData,
		 EventHandler<CommitMajorEventsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitMajorEventsRequest(majorEventData);
            _componentServiceClient.SetEvent("CommitMajorEventsCompleted", callback);
            _componentServiceClient.CommitMajorEventsAsync(request, state);
		  }

		 public  void GetMajorEvents(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetMajorEventsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetMajorEventsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetMajorEventsCompleted", callback);
            _componentServiceClient.GetMajorEventsAsync(request, state);
		  }

		 public  void GetMajorEventWithPagination(Pagination pagination,
		 EventHandler<GetMajorEventWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetMajorEventWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetMajorEventWithPaginationCompleted", callback);
            _componentServiceClient.GetMajorEventWithPaginationAsync(request, state);
		  }

		 public  void GetMajorEventByID(Int32 id,
		 EventHandler<GetMajorEventByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetMajorEventByIDRequest(id);
            _componentServiceClient.SetEvent("GetMajorEventByIDCompleted", callback);
            _componentServiceClient.GetMajorEventByIDAsync(request, state);
		  }

		 public  void CreateAttactDocuments(AttactDocumentDataObjectList attactDocuments,
		 EventHandler<CreateAttactDocumentsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAttactDocumentsRequest(attactDocuments);
            _componentServiceClient.SetEvent("CreateAttactDocumentsCompleted", callback);
            _componentServiceClient.CreateAttactDocumentsAsync(request, state);
		  }

		 public  void DeleteAttactDocuments(IDList attactDocumentIDs,
		 EventHandler<DeleteAttactDocumentsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAttactDocumentsRequest(attactDocumentIDs);
            _componentServiceClient.SetEvent("DeleteAttactDocumentsCompleted", callback);
            _componentServiceClient.DeleteAttactDocumentsAsync(request, state);
		  }

		 public  void UpdateAttactDocuments(AttactDocumentDataObjectList attactDocuments,
		 EventHandler<UpdateAttactDocumentsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAttactDocumentsRequest(attactDocuments);
            _componentServiceClient.SetEvent("UpdateAttactDocumentsCompleted", callback);
            _componentServiceClient.UpdateAttactDocumentsAsync(request, state);
		  }

		 public  void CommitAttactDocuments(AttactDocumentResultData attactDocumentData,
		 EventHandler<CommitAttactDocumentsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAttactDocumentsRequest(attactDocumentData);
            _componentServiceClient.SetEvent("CommitAttactDocumentsCompleted", callback);
            _componentServiceClient.CommitAttactDocumentsAsync(request, state);
		  }

		 public  void GetAttactDocuments(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAttactDocumentsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAttactDocumentsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetAttactDocumentsCompleted", callback);
            _componentServiceClient.GetAttactDocumentsAsync(request, state);
		  }

		 public  void GetAttactDocumentWithPagination(Pagination pagination,
		 EventHandler<GetAttactDocumentWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAttactDocumentWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetAttactDocumentWithPaginationCompleted", callback);
            _componentServiceClient.GetAttactDocumentWithPaginationAsync(request, state);
		  }

		 public  void GetAttactDocumentByID(Int32 id,
		 EventHandler<GetAttactDocumentByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAttactDocumentByIDRequest(id);
            _componentServiceClient.SetEvent("GetAttactDocumentByIDCompleted", callback);
            _componentServiceClient.GetAttactDocumentByIDAsync(request, state);
		  }

		 public  void GetBusinessAttactDocuments(Int32 businessId, String business,
		 EventHandler<GetBusinessAttactDocumentsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetBusinessAttactDocumentsRequest(businessId, business);
            _componentServiceClient.SetEvent("GetBusinessAttactDocumentsCompleted", callback);
            _componentServiceClient.GetBusinessAttactDocumentsAsync(request, state);
		  }

		 public  void CreateAcIntUnitUtilizas(AcIntUnitUtilizaDataObjectList acIntUnitUtilizas,
		 EventHandler<CreateAcIntUnitUtilizasCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAcIntUnitUtilizasRequest(acIntUnitUtilizas);
            _componentServiceClient.SetEvent("CreateAcIntUnitUtilizasCompleted", callback);
            _componentServiceClient.CreateAcIntUnitUtilizasAsync(request, state);
		  }

		 public  void DeleteAcIntUnitUtilizas(IDList acIntUnitUtilizaIDs,
		 EventHandler<DeleteAcIntUnitUtilizasCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAcIntUnitUtilizasRequest(acIntUnitUtilizaIDs);
            _componentServiceClient.SetEvent("DeleteAcIntUnitUtilizasCompleted", callback);
            _componentServiceClient.DeleteAcIntUnitUtilizasAsync(request, state);
		  }

		 public  void UpdateAcIntUnitUtilizas(AcIntUnitUtilizaDataObjectList acIntUnitUtilizas,
		 EventHandler<UpdateAcIntUnitUtilizasCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAcIntUnitUtilizasRequest(acIntUnitUtilizas);
            _componentServiceClient.SetEvent("UpdateAcIntUnitUtilizasCompleted", callback);
            _componentServiceClient.UpdateAcIntUnitUtilizasAsync(request, state);
		  }

		 public  void CommitAcIntUnitUtilizas(AcIntUnitUtilizaResultData acIntUnitUtilizaData,
		 EventHandler<CommitAcIntUnitUtilizasCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAcIntUnitUtilizasRequest(acIntUnitUtilizaData);
            _componentServiceClient.SetEvent("CommitAcIntUnitUtilizasCompleted", callback);
            _componentServiceClient.CommitAcIntUnitUtilizasAsync(request, state);
		  }

		 public  void GetAcIntUnitUtilizas(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcIntUnitUtilizasCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcIntUnitUtilizasRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetAcIntUnitUtilizasCompleted", callback);
            _componentServiceClient.GetAcIntUnitUtilizasAsync(request, state);
		  }

		 public  void GetAcIntUnitUtilizaWithPagination(Pagination pagination,
		 EventHandler<GetAcIntUnitUtilizaWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcIntUnitUtilizaWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetAcIntUnitUtilizaWithPaginationCompleted", callback);
            _componentServiceClient.GetAcIntUnitUtilizaWithPaginationAsync(request, state);
		  }

		 public  void GetAcIntUnitUtilizaByID(Int32 id,
		 EventHandler<GetAcIntUnitUtilizaByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcIntUnitUtilizaByIDRequest(id);
            _componentServiceClient.SetEvent("GetAcIntUnitUtilizaByIDCompleted", callback);
            _componentServiceClient.GetAcIntUnitUtilizaByIDAsync(request, state);
		  }

		 public  void CreateAirBusMSCNs(AirBusMSCNDataObjectList airBusMSCNs,
		 EventHandler<CreateAirBusMSCNsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAirBusMSCNsRequest(airBusMSCNs);
            _componentServiceClient.SetEvent("CreateAirBusMSCNsCompleted", callback);
            _componentServiceClient.CreateAirBusMSCNsAsync(request, state);
		  }

		 public  void DeleteAirBusMSCNs(IDList airBusMSCNIDs,
		 EventHandler<DeleteAirBusMSCNsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAirBusMSCNsRequest(airBusMSCNIDs);
            _componentServiceClient.SetEvent("DeleteAirBusMSCNsCompleted", callback);
            _componentServiceClient.DeleteAirBusMSCNsAsync(request, state);
		  }

		 public  void UpdateAirBusMSCNs(AirBusMSCNDataObjectList airBusMSCNs,
		 EventHandler<UpdateAirBusMSCNsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAirBusMSCNsRequest(airBusMSCNs);
            _componentServiceClient.SetEvent("UpdateAirBusMSCNsCompleted", callback);
            _componentServiceClient.UpdateAirBusMSCNsAsync(request, state);
		  }

		 public  void CommitAirBusMSCNs(AirBusMSCNResultData airBusMSCNData,
		 EventHandler<CommitAirBusMSCNsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAirBusMSCNsRequest(airBusMSCNData);
            _componentServiceClient.SetEvent("CommitAirBusMSCNsCompleted", callback);
            _componentServiceClient.CommitAirBusMSCNsAsync(request, state);
		  }

		 public  void GetAirBusMSCNs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAirBusMSCNsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAirBusMSCNsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetAirBusMSCNsCompleted", callback);
            _componentServiceClient.GetAirBusMSCNsAsync(request, state);
		  }

		 public  void GetAirBusMSCNWithPagination(Pagination pagination,
		 EventHandler<GetAirBusMSCNWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAirBusMSCNWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetAirBusMSCNWithPaginationCompleted", callback);
            _componentServiceClient.GetAirBusMSCNWithPaginationAsync(request, state);
		  }

		 public  void GetAirBusMSCNByID(Int32 id,
		 EventHandler<GetAirBusMSCNByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAirBusMSCNByIDRequest(id);
            _componentServiceClient.SetEvent("GetAirBusMSCNByIDCompleted", callback);
            _componentServiceClient.GetAirBusMSCNByIDAsync(request, state);
		  }

		 public  void CompareMscn(String fleet, String importType, AirBusMSCNDataObjectList airBus,
		 EventHandler<CompareMscnCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CompareMscnRequest(fleet, importType, airBus);
            _componentServiceClient.SetEvent("CompareMscnCompleted", callback);
            _componentServiceClient.CompareMscnAsync(request, state);
		  }

		 public  void CreateAdsbComplys(AdsbComplyDataObjectList adsbComplys,
		 EventHandler<CreateAdsbComplysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAdsbComplysRequest(adsbComplys);
            _componentServiceClient.SetEvent("CreateAdsbComplysCompleted", callback);
            _componentServiceClient.CreateAdsbComplysAsync(request, state);
		  }

		 public  void DeleteAdsbComplys(IDList adsbComplyIDs,
		 EventHandler<DeleteAdsbComplysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAdsbComplysRequest(adsbComplyIDs);
            _componentServiceClient.SetEvent("DeleteAdsbComplysCompleted", callback);
            _componentServiceClient.DeleteAdsbComplysAsync(request, state);
		  }

		 public  void UpdateAdsbComplys(AdsbComplyDataObjectList adsbComplys,
		 EventHandler<UpdateAdsbComplysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAdsbComplysRequest(adsbComplys);
            _componentServiceClient.SetEvent("UpdateAdsbComplysCompleted", callback);
            _componentServiceClient.UpdateAdsbComplysAsync(request, state);
		  }

		 public  void CommitAdsbComplys(AdsbComplyResultData adsbComplyData,
		 EventHandler<CommitAdsbComplysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAdsbComplysRequest(adsbComplyData);
            _componentServiceClient.SetEvent("CommitAdsbComplysCompleted", callback);
            _componentServiceClient.CommitAdsbComplysAsync(request, state);
		  }

		 public  void GetAdsbComplys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAdsbComplysCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAdsbComplysRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetAdsbComplysCompleted", callback);
            _componentServiceClient.GetAdsbComplysAsync(request, state);
		  }

		 public  void GetAdsbComplyWithPagination(Nullable<Boolean> isAD, Pagination pagination,
		 EventHandler<GetAdsbComplyWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAdsbComplyWithPaginationRequest(isAD, pagination);
            _componentServiceClient.SetEvent("GetAdsbComplyWithPaginationCompleted", callback);
            _componentServiceClient.GetAdsbComplyWithPaginationAsync(request, state);
		  }

		 public  void GetAdsbComplyByID(Int32 id,
		 EventHandler<GetAdsbComplyByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAdsbComplyByIDRequest(id);
            _componentServiceClient.SetEvent("GetAdsbComplyByIDCompleted", callback);
            _componentServiceClient.GetAdsbComplyByIDAsync(request, state);
		  }

		 public  void GetAdsbs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAdsbsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAdsbsRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetAdsbsCompleted", callback);
            _componentServiceClient.GetAdsbsAsync(request, state);
		  }

		 public  void GetAdsbWithPagination(Pagination pagination,
		 EventHandler<GetAdsbWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAdsbWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetAdsbWithPaginationCompleted", callback);
            _componentServiceClient.GetAdsbWithPaginationAsync(request, state);
		  }

		 public  void GetAdsbByID(Int32 id,
		 EventHandler<GetAdsbByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAdsbByIDRequest(id);
            _componentServiceClient.SetEvent("GetAdsbByIDCompleted", callback);
            _componentServiceClient.GetAdsbByIDAsync(request, state);
		  }

		 public  void CreateAdsbs(AdsbDataObjectList adsbs,
		 EventHandler<CreateAdsbsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAdsbsRequest(adsbs);
            _componentServiceClient.SetEvent("CreateAdsbsCompleted", callback);
            _componentServiceClient.CreateAdsbsAsync(request, state);
		  }

		 public  void DeleteAdsbs(IDList adsbIDs,
		 EventHandler<DeleteAdsbsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAdsbsRequest(adsbIDs);
            _componentServiceClient.SetEvent("DeleteAdsbsCompleted", callback);
            _componentServiceClient.DeleteAdsbsAsync(request, state);
		  }

		 public  void UpdateAdsbs(AdsbDataObjectList adsbs,
		 EventHandler<UpdateAdsbsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAdsbsRequest(adsbs);
            _componentServiceClient.SetEvent("UpdateAdsbsCompleted", callback);
            _componentServiceClient.UpdateAdsbsAsync(request, state);
		  }

		 public  void CommitAdsbs(AdsbResultData adsbData,
		 EventHandler<CommitAdsbsCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAdsbsRequest(adsbData);
            _componentServiceClient.SetEvent("CommitAdsbsCompleted", callback);
            _componentServiceClient.CommitAdsbsAsync(request, state);
		  }

		 public  void GetAcStructures(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcStructuresCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcStructuresRequest(colFilter, sortFilter);
            _componentServiceClient.SetEvent("GetAcStructuresCompleted", callback);
            _componentServiceClient.GetAcStructuresAsync(request, state);
		  }

		 public  void GetAcStructureWithPagination(Pagination pagination,
		 EventHandler<GetAcStructureWithPaginationCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcStructureWithPaginationRequest(pagination);
            _componentServiceClient.SetEvent("GetAcStructureWithPaginationCompleted", callback);
            _componentServiceClient.GetAcStructureWithPaginationAsync(request, state);
		  }

		 public  void GetAcStructureByID(Int32 id,
		 EventHandler<GetAcStructureByIDCompletedEventArgs> callback,object state = null)
		 {
		     var request = new GetAcStructureByIDRequest(id);
            _componentServiceClient.SetEvent("GetAcStructureByIDCompleted", callback);
            _componentServiceClient.GetAcStructureByIDAsync(request, state);
		  }

		 public  void CreateAcStructures(AcStructureDataObjectList acStructures,
		 EventHandler<CreateAcStructuresCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CreateAcStructuresRequest(acStructures);
            _componentServiceClient.SetEvent("CreateAcStructuresCompleted", callback);
            _componentServiceClient.CreateAcStructuresAsync(request, state);
		  }

		 public  void DeleteAcStructures(IDList acStructureIDs,
		 EventHandler<DeleteAcStructuresCompletedEventArgs> callback,object state = null)
		 {
		     var request = new DeleteAcStructuresRequest(acStructureIDs);
            _componentServiceClient.SetEvent("DeleteAcStructuresCompleted", callback);
            _componentServiceClient.DeleteAcStructuresAsync(request, state);
		  }

		 public  void UpdateAcStructures(AcStructureDataObjectList acStructures,
		 EventHandler<UpdateAcStructuresCompletedEventArgs> callback,object state = null)
		 {
		     var request = new UpdateAcStructuresRequest(acStructures);
            _componentServiceClient.SetEvent("UpdateAcStructuresCompleted", callback);
            _componentServiceClient.UpdateAcStructuresAsync(request, state);
		  }

		 public  void CommitAcStructures(AcStructureResultData acStructureData,
		 EventHandler<CommitAcStructuresCompletedEventArgs> callback,object state = null)
		 {
		     var request = new CommitAcStructuresRequest(acStructureData);
            _componentServiceClient.SetEvent("CommitAcStructuresCompleted", callback);
            _componentServiceClient.CommitAcStructuresAsync(request, state);
		  }

		
		public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
	}
}