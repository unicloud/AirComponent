 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using UniCloud.DataObjects.Silverlight;
using UniCloud.Services.Client.Component;

namespace UniCloud.Services
{
    /// <summary>
    /// 附件管理接口
    /// </summary>
    public interface IPartClient : IDisposable 
    {
	    
         void CreateCcOrders(CcOrderDataObjectList ccOrders,
		 EventHandler<CreateCcOrdersCompletedEventArgs> callback,object state = null);

		 void DeleteCcOrders(IDList ccOrderIDs,
		 EventHandler<DeleteCcOrdersCompletedEventArgs> callback,object state = null);

		 void UpdateCcOrders(CcOrderDataObjectList ccOrders,
		 EventHandler<UpdateCcOrdersCompletedEventArgs> callback,object state = null);

		 void CommitCcOrders(CcOrderResultData ccOrderData,
		 EventHandler<CommitCcOrdersCompletedEventArgs> callback,object state = null);

		 void GetFullCcOrderByID(Int32 id,
		 EventHandler<GetFullCcOrderByIDCompletedEventArgs> callback,object state = null);

		 void GetFullCcOrders(
		 EventHandler<GetFullCcOrdersCompletedEventArgs> callback,object state = null);

		 void VerifyCcOrder(Int32 ccOrderId,
		 EventHandler<VerifyCcOrderCompletedEventArgs> callback,object state = null);

		 void VerifyEngCcOrder(Int32 ccOrderId,
		 EventHandler<VerifyEngCcOrderCompletedEventArgs> callback,object state = null);

		 void GetCcOrders(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetCcOrdersCompletedEventArgs> callback,object state = null);

		 void GetCcOrderWithPagination(Pagination pagination,
		 EventHandler<GetCcOrderWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetCcOrderByID(Int32 id,
		 EventHandler<GetCcOrderByIDCompletedEventArgs> callback,object state = null);

		 void GetEngCcOrderWithPagination(Pagination pagination,
		 EventHandler<GetEngCcOrderWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetEngCcOrderByID(Int32 id,
		 EventHandler<GetEngCcOrderByIDCompletedEventArgs> callback,object state = null);

		 void CreateCcpMains(CcpMainDataObjectList ccpMains,
		 EventHandler<CreateCcpMainsCompletedEventArgs> callback,object state = null);

		 void DeleteCcpMains(IDList ccpMainIDs,
		 EventHandler<DeleteCcpMainsCompletedEventArgs> callback,object state = null);

		 void UpdateCcpMains(CcpMainDataObjectList ccpMains,
		 EventHandler<UpdateCcpMainsCompletedEventArgs> callback,object state = null);

		 void CommitCcpMains(CcpMainResultData ccpMainData,
		 EventHandler<CommitCcpMainsCompletedEventArgs> callback,object state = null);

		 void GetFullCcpMainByID(Int32 id,
		 EventHandler<GetFullCcpMainByIDCompletedEventArgs> callback,object state = null);

		 void GetFullCcpMains(
		 EventHandler<GetFullCcpMainsCompletedEventArgs> callback,object state = null);

		 void QueryAllCcpMain(String actype, String itemNo, String ata, String stateStation,
		 EventHandler<QueryAllCcpMainCompletedEventArgs> callback,object state = null);

		 void VerifyCcpMain(Int32 ccpMainId,
		 EventHandler<VerifyCcpMainCompletedEventArgs> callback,object state = null);

		 void GetCcpMains(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetCcpMainsCompletedEventArgs> callback,object state = null);

		 void GetCcpMainWithPagination(Pagination pagination,
		 EventHandler<GetCcpMainWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetCcpMainByID(Int32 id,
		 EventHandler<GetCcpMainByIDCompletedEventArgs> callback,object state = null);

		 void CreateIntUnits(IntUnitDataObjectList intUnits,
		 EventHandler<CreateIntUnitsCompletedEventArgs> callback,object state = null);

		 void DeleteIntUnits(IDList intUnitIDs,
		 EventHandler<DeleteIntUnitsCompletedEventArgs> callback,object state = null);

		 void UpdateIntUnits(IntUnitDataObjectList intUnits,
		 EventHandler<UpdateIntUnitsCompletedEventArgs> callback,object state = null);

		 void CommitIntUnits(IntUnitResultData intUnitData,
		 EventHandler<CommitIntUnitsCompletedEventArgs> callback,object state = null);

		 void GetIntUnits(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetIntUnitsCompletedEventArgs> callback,object state = null);

		 void GetIntUnitWithPagination(Pagination pagination,
		 EventHandler<GetIntUnitWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetIntUnitByID(Int32 id,
		 EventHandler<GetIntUnitByIDCompletedEventArgs> callback,object state = null);

		 void CreateOilHistorys(OilHistoryDataObjectList oilHistorys,
		 EventHandler<CreateOilHistorysCompletedEventArgs> callback,object state = null);

		 void DeleteOilHistorys(IDList oilHistoryIDs,
		 EventHandler<DeleteOilHistorysCompletedEventArgs> callback,object state = null);

		 void UpdateOilHistorys(OilHistoryDataObjectList oilHistorys,
		 EventHandler<UpdateOilHistorysCompletedEventArgs> callback,object state = null);

		 void CommitOilHistorys(OilHistoryResultData oilHistoryData,
		 EventHandler<CommitOilHistorysCompletedEventArgs> callback,object state = null);

		 void GetFullOilHistoryByID(Int32 id,
		 EventHandler<GetFullOilHistoryByIDCompletedEventArgs> callback,object state = null);

		 void GetFullOilHistorys(
		 EventHandler<GetFullOilHistorysCompletedEventArgs> callback,object state = null);

		 void GetOilHistorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetOilHistorysCompletedEventArgs> callback,object state = null);

		 void GetOilHistoryWithPagination(Pagination pagination,
		 EventHandler<GetOilHistoryWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetOilHistoryByID(Int32 id,
		 EventHandler<GetOilHistoryByIDCompletedEventArgs> callback,object state = null);

		 void GetOilAnalysiss(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetOilAnalysissCompletedEventArgs> callback,object state = null);

		 void GetOilAnalysisWithPagination(Pagination pagination,
		 EventHandler<GetOilAnalysisWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetOilAnalysisByID(Int32 id,
		 EventHandler<GetOilAnalysisByIDCompletedEventArgs> callback,object state = null);

		 void GetOilAnalysisBySnData(OilAnalysisDataObject searchObj,
		 EventHandler<GetOilAnalysisBySnDataCompletedEventArgs> callback,object state = null);

		 void CreateOilAnalysiss(OilAnalysisDataObjectList oilAnalysiss,
		 EventHandler<CreateOilAnalysissCompletedEventArgs> callback,object state = null);

		 void DeleteOilAnalysiss(IDList oilAnalysisIDs,
		 EventHandler<DeleteOilAnalysissCompletedEventArgs> callback,object state = null);

		 void UpdateOilAnalysiss(OilAnalysisDataObjectList oilAnalysiss,
		 EventHandler<UpdateOilAnalysissCompletedEventArgs> callback,object state = null);

		 void CommitOilAnalysiss(OilAnalysisResultData oilAnalysisData,
		 EventHandler<CommitOilAnalysissCompletedEventArgs> callback,object state = null);

		 void GetFullOilAnalysisByID(Int32 id,
		 EventHandler<GetFullOilAnalysisByIDCompletedEventArgs> callback,object state = null);

		 void GetFullOilAnalysiss(
		 EventHandler<GetFullOilAnalysissCompletedEventArgs> callback,object state = null);

		 void OilAnalysisOntime(
		 EventHandler<OilAnalysisOntimeCompletedEventArgs> callback,object state = null);

		 void CreatePartsMonitors(PartsMonitorDataObjectList partsMonitors,
		 EventHandler<CreatePartsMonitorsCompletedEventArgs> callback,object state = null);

		 void DeletePartsMonitors(IDList partsMonitorIDs,
		 EventHandler<DeletePartsMonitorsCompletedEventArgs> callback,object state = null);

		 void UpdatePartsMonitors(PartsMonitorDataObjectList partsMonitors,
		 EventHandler<UpdatePartsMonitorsCompletedEventArgs> callback,object state = null);

		 void CommitPartsMonitors(PartsMonitorResultData partsMonitorData,
		 EventHandler<CommitPartsMonitorsCompletedEventArgs> callback,object state = null);

		 void GetFullPartsMonitorByID(Int32 id,
		 EventHandler<GetFullPartsMonitorByIDCompletedEventArgs> callback,object state = null);

		 void GetFullPartsMonitors(
		 EventHandler<GetFullPartsMonitorsCompletedEventArgs> callback,object state = null);

		 void CalculateAllCcpMain(
		 EventHandler<CalculateAllCcpMainCompletedEventArgs> callback,object state = null);

		 void CalculateSpecificCcpMain(String itemno,
		 EventHandler<CalculateSpecificCcpMainCompletedEventArgs> callback,object state = null);

		 void GetPartsMonitors(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetPartsMonitorsCompletedEventArgs> callback,object state = null);

		 void GetPartsMonitorWithPagination(Pagination pagination,
		 EventHandler<GetPartsMonitorWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetPartsMonitorByID(Int32 id,
		 EventHandler<GetPartsMonitorByIDCompletedEventArgs> callback,object state = null);

		 void CreatePnRegs(PnRegDataObjectList pnRegs,
		 EventHandler<CreatePnRegsCompletedEventArgs> callback,object state = null);

		 void DeletePnRegs(IDList pnRegIDs,
		 EventHandler<DeletePnRegsCompletedEventArgs> callback,object state = null);

		 void UpdatePnRegs(PnRegDataObjectList pnRegs,
		 EventHandler<UpdatePnRegsCompletedEventArgs> callback,object state = null);

		 void CommitPnRegs(PnRegResultData pnRegData,
		 EventHandler<CommitPnRegsCompletedEventArgs> callback,object state = null);

		 void GetFullPnRegByID(Int32 id,
		 EventHandler<GetFullPnRegByIDCompletedEventArgs> callback,object state = null);

		 void GetFullPnRegs(
		 EventHandler<GetFullPnRegsCompletedEventArgs> callback,object state = null);

		 void GetPnRegs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetPnRegsCompletedEventArgs> callback,object state = null);

		 void GetPnRegWithPagination(Pagination pagination, Boolean isEngPart,
		 EventHandler<GetPnRegWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetPnRegByID(Int32 id,
		 EventHandler<GetPnRegByIDCompletedEventArgs> callback,object state = null);

		 void GetPnRegByPn(String pn,
		 EventHandler<GetPnRegByPnCompletedEventArgs> callback,object state = null);

		 void QueryPnregCol(String pn,
		 EventHandler<QueryPnregColCompletedEventArgs> callback,object state = null);

		 void GetEngPnOilWithPagination(Pagination pagination,
		 EventHandler<GetEngPnOilWithPaginationCompletedEventArgs> callback,object state = null);

		 void CreateScnMains(ScnMainDataObjectList scnMains,
		 EventHandler<CreateScnMainsCompletedEventArgs> callback,object state = null);

		 void DeleteScnMains(IDList scnMainIDs,
		 EventHandler<DeleteScnMainsCompletedEventArgs> callback,object state = null);

		 void UpdateScnMains(ScnMainDataObjectList scnMains,
		 EventHandler<UpdateScnMainsCompletedEventArgs> callback,object state = null);

		 void CommitScnMains(ScnMainResultData scnMainData,
		 EventHandler<CommitScnMainsCompletedEventArgs> callback,object state = null);

		 void GetFullScnMainByID(Int32 id,
		 EventHandler<GetFullScnMainByIDCompletedEventArgs> callback,object state = null);

		 void GetFullScnMains(
		 EventHandler<GetFullScnMainsCompletedEventArgs> callback,object state = null);

		 void GetScnMains(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetScnMainsCompletedEventArgs> callback,object state = null);

		 void GetScnMainWithPagination(Pagination pagination, String organization,
		 EventHandler<GetScnMainWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetScnMainByID(Int32 id,
		 EventHandler<GetScnMainByIDCompletedEventArgs> callback,object state = null);

		 void CompareAcOrders(String msn1, String msn2, Pagination pagination,
		 EventHandler<CompareAcOrdersCompletedEventArgs> callback,object state = null);

		 void GetAcOrderMsns(
		 EventHandler<GetAcOrderMsnsCompletedEventArgs> callback,object state = null);

		 void CreateSnHistorys(SnHistoryDataObjectList snHistorys,
		 EventHandler<CreateSnHistorysCompletedEventArgs> callback,object state = null);

		 void DeleteSnHistorys(IDList snHistoryIDs,
		 EventHandler<DeleteSnHistorysCompletedEventArgs> callback,object state = null);

		 void UpdateSnHistorys(SnHistoryDataObjectList snHistorys,
		 EventHandler<UpdateSnHistorysCompletedEventArgs> callback,object state = null);

		 void CommitSnHistorys(SnHistoryResultData snHistoryData,
		 EventHandler<CommitSnHistorysCompletedEventArgs> callback,object state = null);

		 void GetFullSnHistoryByID(Int32 id,
		 EventHandler<GetFullSnHistoryByIDCompletedEventArgs> callback,object state = null);

		 void GetFullSnHistorys(
		 EventHandler<GetFullSnHistorysCompletedEventArgs> callback,object state = null);

		 void GetSnHistorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetSnHistorysCompletedEventArgs> callback,object state = null);

		 void GetSnHistoryWithPagination(Pagination pagination,
		 EventHandler<GetSnHistoryWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetSnHistoryByID(Int32 id,
		 EventHandler<GetSnHistoryByIDCompletedEventArgs> callback,object state = null);

		 void QuerySnHistorys(String ac, String itemNo, String pn, DateTime fromDate, DateTime toDate,
		 EventHandler<QuerySnHistorysCompletedEventArgs> callback,object state = null);

		 void GetLastSnHistoryBySnregID(Int32 id,
		 EventHandler<GetLastSnHistoryBySnregIDCompletedEventArgs> callback,object state = null);

		 void CreateSnRegs(SnRegDataObjectList snRegs,
		 EventHandler<CreateSnRegsCompletedEventArgs> callback,object state = null);

		 void DeleteSnRegs(IDList snRegIDs,
		 EventHandler<DeleteSnRegsCompletedEventArgs> callback,object state = null);

		 void UpdateSnRegs(SnRegDataObjectList snRegs,
		 EventHandler<UpdateSnRegsCompletedEventArgs> callback,object state = null);

		 void CommitSnRegs(SnRegResultData snRegData,
		 EventHandler<CommitSnRegsCompletedEventArgs> callback,object state = null);

		 void GetFullSnRegByID(Int32 id,
		 EventHandler<GetFullSnRegByIDCompletedEventArgs> callback,object state = null);

		 void GetFullSnRegs(
		 EventHandler<GetFullSnRegsCompletedEventArgs> callback,object state = null);

		 void QuerySnRegs(String ac, Int32 pnRegId, String sn,
		 EventHandler<QuerySnRegsCompletedEventArgs> callback,object state = null);

		 void QuerySnRegDtos(String itemNo, Int32 pnId, Int32 snId, String ac, String avail,
		 EventHandler<QuerySnRegDtosCompletedEventArgs> callback,object state = null);

		 void GetSnRegs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetSnRegsCompletedEventArgs> callback,object state = null);

		 void GetSnRegWithPagination(Pagination pagination,
		 EventHandler<GetSnRegWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetSnRegByID(Int32 id,
		 EventHandler<GetSnRegByIDCompletedEventArgs> callback,object state = null);

		 void GetSnEgtMarginByID(Int32 id,
		 EventHandler<GetSnEgtMarginByIDCompletedEventArgs> callback,object state = null);

		 void GetSnRegEgtWithPagination(Pagination pagination,
		 EventHandler<GetSnRegEgtWithPaginationCompletedEventArgs> callback,object state = null);

		 void QueryEngineReportDetail(Int32 id,
		 EventHandler<QueryEngineReportDetailCompletedEventArgs> callback,object state = null);

		 void QueryEngineReports(Pagination pagination,
		 EventHandler<QueryEngineReportsCompletedEventArgs> callback,object state = null);

		 void CreateWfHistorys(WfHistoryDataObjectList wfHistorys,
		 EventHandler<CreateWfHistorysCompletedEventArgs> callback,object state = null);

		 void DeleteWfHistorys(IDList wfHistoryIDs,
		 EventHandler<DeleteWfHistorysCompletedEventArgs> callback,object state = null);

		 void UpdateWfHistorys(WfHistoryDataObjectList wfHistorys,
		 EventHandler<UpdateWfHistorysCompletedEventArgs> callback,object state = null);

		 void CommitWfHistorys(WfHistoryResultData wfHistoryData,
		 EventHandler<CommitWfHistorysCompletedEventArgs> callback,object state = null);

		 void GetFullWfHistoryByID(Int32 id,
		 EventHandler<GetFullWfHistoryByIDCompletedEventArgs> callback,object state = null);

		 void GetFullWfHistorys(
		 EventHandler<GetFullWfHistorysCompletedEventArgs> callback,object state = null);

		 void GetWfHistorys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetWfHistorysCompletedEventArgs> callback,object state = null);

		 void GetWfHistoryWithPagination(Pagination pagination,
		 EventHandler<GetWfHistoryWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetWfHistoryByID(Int32 id,
		 EventHandler<GetWfHistoryByIDCompletedEventArgs> callback,object state = null);

		 void GetWfHistorysByBusiness(String business, Int32 businessID,
		 EventHandler<GetWfHistorysByBusinessCompletedEventArgs> callback,object state = null);

		 void CreateWorkScopes(WorkScopeDataObjectList workScopes,
		 EventHandler<CreateWorkScopesCompletedEventArgs> callback,object state = null);

		 void DeleteWorkScopes(IDList workScopeIDs,
		 EventHandler<DeleteWorkScopesCompletedEventArgs> callback,object state = null);

		 void UpdateWorkScopes(WorkScopeDataObjectList workScopes,
		 EventHandler<UpdateWorkScopesCompletedEventArgs> callback,object state = null);

		 void CommitWorkScopes(WorkScopeResultData workScopeData,
		 EventHandler<CommitWorkScopesCompletedEventArgs> callback,object state = null);

		 void GetWorkScopes(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetWorkScopesCompletedEventArgs> callback,object state = null);

		 void GetWorkScopeWithPagination(Pagination pagination,
		 EventHandler<GetWorkScopeWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetWorkScopeByID(Int32 id,
		 EventHandler<GetWorkScopeByIDCompletedEventArgs> callback,object state = null);

		 void CreateEgtMargins(EgtMarginDataObjectList egtMargins,
		 EventHandler<CreateEgtMarginsCompletedEventArgs> callback,object state = null);

		 void DeleteEgtMargins(IDList egtMarginIDs,
		 EventHandler<DeleteEgtMarginsCompletedEventArgs> callback,object state = null);

		 void UpdateEgtMargins(EgtMarginDataObjectList egtMargins,
		 EventHandler<UpdateEgtMarginsCompletedEventArgs> callback,object state = null);

		 void CommitEgtMargins(EgtMarginResultData egtMarginData,
		 EventHandler<CommitEgtMarginsCompletedEventArgs> callback,object state = null);

		 void GetEgtMargins(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetEgtMarginsCompletedEventArgs> callback,object state = null);

		 void GetEgtMarginWithPagination(Pagination pagination,
		 EventHandler<GetEgtMarginWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetEgtMarginByID(Int32 id,
		 EventHandler<GetEgtMarginByIDCompletedEventArgs> callback,object state = null);

		 void SaveSnregEgts(SnRegDataObjectList snregs,
		 EventHandler<SaveSnregEgtsCompletedEventArgs> callback,object state = null);

		 void SaveImportEgts(SnRegDataObjectList snregs,
		 EventHandler<SaveImportEgtsCompletedEventArgs> callback,object state = null);

		 void CreateMajorEvents(MajorEventDataObjectList majorEvents,
		 EventHandler<CreateMajorEventsCompletedEventArgs> callback,object state = null);

		 void DeleteMajorEvents(IDList majorEventIDs,
		 EventHandler<DeleteMajorEventsCompletedEventArgs> callback,object state = null);

		 void UpdateMajorEvents(MajorEventDataObjectList majorEvents,
		 EventHandler<UpdateMajorEventsCompletedEventArgs> callback,object state = null);

		 void CommitMajorEvents(MajorEventResultData majorEventData,
		 EventHandler<CommitMajorEventsCompletedEventArgs> callback,object state = null);

		 void GetMajorEvents(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetMajorEventsCompletedEventArgs> callback,object state = null);

		 void GetMajorEventWithPagination(Pagination pagination,
		 EventHandler<GetMajorEventWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetMajorEventByID(Int32 id,
		 EventHandler<GetMajorEventByIDCompletedEventArgs> callback,object state = null);

		 void CreateAttactDocuments(AttactDocumentDataObjectList attactDocuments,
		 EventHandler<CreateAttactDocumentsCompletedEventArgs> callback,object state = null);

		 void DeleteAttactDocuments(IDList attactDocumentIDs,
		 EventHandler<DeleteAttactDocumentsCompletedEventArgs> callback,object state = null);

		 void UpdateAttactDocuments(AttactDocumentDataObjectList attactDocuments,
		 EventHandler<UpdateAttactDocumentsCompletedEventArgs> callback,object state = null);

		 void CommitAttactDocuments(AttactDocumentResultData attactDocumentData,
		 EventHandler<CommitAttactDocumentsCompletedEventArgs> callback,object state = null);

		 void GetAttactDocuments(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAttactDocumentsCompletedEventArgs> callback,object state = null);

		 void GetAttactDocumentWithPagination(Pagination pagination,
		 EventHandler<GetAttactDocumentWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetAttactDocumentByID(Int32 id,
		 EventHandler<GetAttactDocumentByIDCompletedEventArgs> callback,object state = null);

		 void GetBusinessAttactDocuments(Int32 businessId, String business,
		 EventHandler<GetBusinessAttactDocumentsCompletedEventArgs> callback,object state = null);

		 void CreateAcIntUnitUtilizas(AcIntUnitUtilizaDataObjectList acIntUnitUtilizas,
		 EventHandler<CreateAcIntUnitUtilizasCompletedEventArgs> callback,object state = null);

		 void DeleteAcIntUnitUtilizas(IDList acIntUnitUtilizaIDs,
		 EventHandler<DeleteAcIntUnitUtilizasCompletedEventArgs> callback,object state = null);

		 void UpdateAcIntUnitUtilizas(AcIntUnitUtilizaDataObjectList acIntUnitUtilizas,
		 EventHandler<UpdateAcIntUnitUtilizasCompletedEventArgs> callback,object state = null);

		 void CommitAcIntUnitUtilizas(AcIntUnitUtilizaResultData acIntUnitUtilizaData,
		 EventHandler<CommitAcIntUnitUtilizasCompletedEventArgs> callback,object state = null);

		 void GetAcIntUnitUtilizas(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcIntUnitUtilizasCompletedEventArgs> callback,object state = null);

		 void GetAcIntUnitUtilizaWithPagination(Pagination pagination,
		 EventHandler<GetAcIntUnitUtilizaWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetAcIntUnitUtilizaByID(Int32 id,
		 EventHandler<GetAcIntUnitUtilizaByIDCompletedEventArgs> callback,object state = null);

		 void CreateAirBusMSCNs(AirBusMSCNDataObjectList airBusMSCNs,
		 EventHandler<CreateAirBusMSCNsCompletedEventArgs> callback,object state = null);

		 void DeleteAirBusMSCNs(IDList airBusMSCNIDs,
		 EventHandler<DeleteAirBusMSCNsCompletedEventArgs> callback,object state = null);

		 void UpdateAirBusMSCNs(AirBusMSCNDataObjectList airBusMSCNs,
		 EventHandler<UpdateAirBusMSCNsCompletedEventArgs> callback,object state = null);

		 void CommitAirBusMSCNs(AirBusMSCNResultData airBusMSCNData,
		 EventHandler<CommitAirBusMSCNsCompletedEventArgs> callback,object state = null);

		 void GetAirBusMSCNs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAirBusMSCNsCompletedEventArgs> callback,object state = null);

		 void GetAirBusMSCNWithPagination(Pagination pagination,
		 EventHandler<GetAirBusMSCNWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetAirBusMSCNByID(Int32 id,
		 EventHandler<GetAirBusMSCNByIDCompletedEventArgs> callback,object state = null);

		 void CompareMscn(String fleet, String importType, AirBusMSCNDataObjectList airBus,
		 EventHandler<CompareMscnCompletedEventArgs> callback,object state = null);

		 void CreateAdsbComplys(AdsbComplyDataObjectList adsbComplys,
		 EventHandler<CreateAdsbComplysCompletedEventArgs> callback,object state = null);

		 void DeleteAdsbComplys(IDList adsbComplyIDs,
		 EventHandler<DeleteAdsbComplysCompletedEventArgs> callback,object state = null);

		 void UpdateAdsbComplys(AdsbComplyDataObjectList adsbComplys,
		 EventHandler<UpdateAdsbComplysCompletedEventArgs> callback,object state = null);

		 void CommitAdsbComplys(AdsbComplyResultData adsbComplyData,
		 EventHandler<CommitAdsbComplysCompletedEventArgs> callback,object state = null);

		 void GetAdsbComplys(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAdsbComplysCompletedEventArgs> callback,object state = null);

		 void GetAdsbComplyWithPagination(Nullable<Boolean> isAD, Pagination pagination,
		 EventHandler<GetAdsbComplyWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetAdsbComplyByID(Int32 id,
		 EventHandler<GetAdsbComplyByIDCompletedEventArgs> callback,object state = null);

		 void GetAdsbs(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAdsbsCompletedEventArgs> callback,object state = null);

		 void GetAdsbWithPagination(Pagination pagination,
		 EventHandler<GetAdsbWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetAdsbByID(Int32 id,
		 EventHandler<GetAdsbByIDCompletedEventArgs> callback,object state = null);

		 void CreateAdsbs(AdsbDataObjectList adsbs,
		 EventHandler<CreateAdsbsCompletedEventArgs> callback,object state = null);

		 void DeleteAdsbs(IDList adsbIDs,
		 EventHandler<DeleteAdsbsCompletedEventArgs> callback,object state = null);

		 void UpdateAdsbs(AdsbDataObjectList adsbs,
		 EventHandler<UpdateAdsbsCompletedEventArgs> callback,object state = null);

		 void CommitAdsbs(AdsbResultData adsbData,
		 EventHandler<CommitAdsbsCompletedEventArgs> callback,object state = null);

		 void GetAcStructures(ColumnFilterDescriptorCollection colFilter, ColumnSortDescriptorCollection sortFilter,
		 EventHandler<GetAcStructuresCompletedEventArgs> callback,object state = null);

		 void GetAcStructureWithPagination(Pagination pagination,
		 EventHandler<GetAcStructureWithPaginationCompletedEventArgs> callback,object state = null);

		 void GetAcStructureByID(Int32 id,
		 EventHandler<GetAcStructureByIDCompletedEventArgs> callback,object state = null);

		 void CreateAcStructures(AcStructureDataObjectList acStructures,
		 EventHandler<CreateAcStructuresCompletedEventArgs> callback,object state = null);

		 void DeleteAcStructures(IDList acStructureIDs,
		 EventHandler<DeleteAcStructuresCompletedEventArgs> callback,object state = null);

		 void UpdateAcStructures(AcStructureDataObjectList acStructures,
		 EventHandler<UpdateAcStructuresCompletedEventArgs> callback,object state = null);

		 void CommitAcStructures(AcStructureResultData acStructureData,
		 EventHandler<CommitAcStructuresCompletedEventArgs> callback,object state = null);

			}
}